"use strict";
/**
 * Copyright 2020, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.themePropType = void 0;
const prop_types_1 = __importDefault(require("prop-types"));
const typePropType = prop_types_1.default.shape({
    fontSize: prop_types_1.default.string,
    lineHeight: prop_types_1.default.string,
}).isRequired;
const gridPropType = prop_types_1.default.shape({
    priority: prop_types_1.default.number.isRequired,
    breakpoint: prop_types_1.default.oneOf([
        'default',
        'untilKilo',
        'kilo',
        'mega',
        'giga',
        'tera',
    ]).isRequired,
    cols: prop_types_1.default.number.isRequired,
    maxWidth: prop_types_1.default.string.isRequired,
    gutter: prop_types_1.default.string.isRequired,
}).isRequired;
/**
 * @deprecated
 *
 * Use the CSS custom properties from `@sumup-oss/design-tokens` instead.
 * Use the [`circuit-ui/prefer-custom-properties`](https://github.com/sumup-oss/circuit-ui/tree/main/packages/eslint-plugin-circuit-ui/prefer-custom-properties)
 * ESLint rule to automatically migrate your code.
 */
exports.themePropType = prop_types_1.default.shape({
    spacings: prop_types_1.default.shape({
        bit: prop_types_1.default.string.isRequired,
        byte: prop_types_1.default.string.isRequired,
        kilo: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
        giga: prop_types_1.default.string.isRequired,
        tera: prop_types_1.default.string.isRequired,
        peta: prop_types_1.default.string.isRequired,
        exa: prop_types_1.default.string.isRequired,
        zetta: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    iconSizes: prop_types_1.default.shape({
        kilo: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
        giga: prop_types_1.default.string.isRequired,
        tera: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    borderRadius: prop_types_1.default.shape({
        bit: prop_types_1.default.string.isRequired,
        byte: prop_types_1.default.string.isRequired,
        kilo: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
        circle: prop_types_1.default.string.isRequired,
        pill: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    borderWidth: prop_types_1.default.shape({
        kilo: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    typography: prop_types_1.default.shape({
        headline: prop_types_1.default.shape({
            one: typePropType,
            two: typePropType,
            three: typePropType,
            four: typePropType,
        }).isRequired,
        title: prop_types_1.default.shape({
            one: typePropType,
            two: typePropType,
            three: typePropType,
            four: typePropType,
        }).isRequired,
        subHeadline: typePropType,
        body: prop_types_1.default.shape({
            one: typePropType,
            two: typePropType,
        }).isRequired,
        bodyLarge: typePropType,
    }).isRequired,
    fontStack: prop_types_1.default.shape({
        default: prop_types_1.default.string,
        mono: prop_types_1.default.string,
    }).isRequired,
    fontWeight: prop_types_1.default.shape({
        regular: prop_types_1.default.string.isRequired,
        bold: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    breakpoints: prop_types_1.default.shape({
        untilKilo: prop_types_1.default.string.isRequired,
        kilo: prop_types_1.default.string.isRequired,
        kiloToMega: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
        untilMega: prop_types_1.default.string.isRequired,
        megaToGiga: prop_types_1.default.string.isRequired,
        giga: prop_types_1.default.string.isRequired,
        untilGiga: prop_types_1.default.string.isRequired,
        gigaToTera: prop_types_1.default.string.isRequired,
        tera: prop_types_1.default.string.isRequired,
        untilTera: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    mq: prop_types_1.default.shape({
        untilKilo: prop_types_1.default.string.isRequired,
        kilo: prop_types_1.default.string.isRequired,
        kiloToMega: prop_types_1.default.string.isRequired,
        mega: prop_types_1.default.string.isRequired,
        untilMega: prop_types_1.default.string.isRequired,
        megaToGiga: prop_types_1.default.string.isRequired,
        giga: prop_types_1.default.string.isRequired,
        gigaToTera: prop_types_1.default.string.isRequired,
        tera: prop_types_1.default.string.isRequired,
        untilTera: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    grid: prop_types_1.default.shape({
        default: gridPropType,
        untilKilo: gridPropType,
        kilo: gridPropType,
        mega: gridPropType,
        giga: gridPropType,
        tera: gridPropType,
    }).isRequired,
    transitions: prop_types_1.default.shape({
        default: prop_types_1.default.string.isRequired,
        slow: prop_types_1.default.string.isRequired,
    })
        .isRequired,
    zIndex: prop_types_1.default.shape({
        default: prop_types_1.default.number.isRequired,
        absolute: prop_types_1.default.number.isRequired,
        input: prop_types_1.default.number.isRequired,
        popover: prop_types_1.default.number.isRequired,
        tooltip: prop_types_1.default.number.isRequired,
        header: prop_types_1.default.number.isRequired,
        backdrop: prop_types_1.default.number.isRequired,
        navigation: prop_types_1.default.number.isRequired,
        modal: prop_types_1.default.number.isRequired,
        toast: prop_types_1.default.number.isRequired,
    }).isRequired,
});
