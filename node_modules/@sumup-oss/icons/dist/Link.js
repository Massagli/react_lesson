const _excluded = ["size"];
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++)
      (o = n[r]),
        -1 === t.indexOf(o) &&
          {}.propertyIsEnumerable.call(e, o) &&
          (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r)
    if ({}.hasOwnProperty.call(r, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r[n];
    }
  return t;
}
function _extends() {
  return (
    (_extends = Object.assign
      ? Object.assign.bind()
      : function (n) {
          for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
          }
          return n;
        }),
    _extends.apply(null, arguments)
  );
}
import React from "react";
var Link24 = function Link24(props) {
  return /*#__PURE__*/ React.createElement(
    "svg",
    _extends(
      {
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
      },
      props,
    ),
    /*#__PURE__*/ React.createElement("path", {
      d: "M6.975 23A5.96 5.96 0 0 1 2.75 12.821l4.021-4.012a5.992 5.992 0 0 1 8.448 0c.217.218.418.452.6.7A1 1 0 1 1 14.21 10.7a3.985 3.985 0 0 0-6.027-.471l-4.022 4.009a3.957 3.957 0 0 0 0 5.595v.005a3.988 3.988 0 0 0 5.624 0l.5-.5a1.003 1.003 0 0 1 1.632.326 1.003 1.003 0 0 1-.218 1.091l-.5.5A5.96 5.96 0 0 1 6.975 23zm10.254-7.81 4.02-4.012a5.956 5.956 0 0 0 .013-8.423l-.013-.013a5.99 5.99 0 0 0-8.447 0l-.5.5a1 1 0 0 0 1.412 1.417l.5-.5a3.97 3.97 0 0 1 5.628 5.6v.005l-4.021 4.012a3.987 3.987 0 0 1-6.027-.471A1.002 1.002 0 0 0 8.18 14.49a5.976 5.976 0 0 0 9.048.7z",
      fill: "currentColor",
    }),
  );
};
const sizeMap = {
  24: Link24,
};
export function Link(_ref) {
  let { size = "24" } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const Icon = sizeMap[size] || sizeMap["24"];
  if (
    process.env.NODE_ENV !== "production" &&
    process.env.NODE_ENV !== "test" &&
    !sizeMap[size]
  ) {
    console.warn(
      new Error(
        "The '".concat(
          size,
          "' size is not supported by the 'Link' icon. Please use one of the available sizes: '24'.",
        ),
      ),
    );
  }
  return /*#__PURE__*/ React.createElement(Icon, props);
}
