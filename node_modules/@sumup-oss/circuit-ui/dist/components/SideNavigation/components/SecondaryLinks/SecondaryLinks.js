"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import { clsx } from "../../../../styles/clsx.js";
import { utilClasses } from "../../../../styles/utility.js";
import { sharedClasses } from "../../../../styles/shared.js";
import { TierIndicator } from "../../../TierIndicator/TierIndicator.js";
import { CircuitError } from "../../../../util/errors.js";
import classes from "./SecondaryLinks.module.css.js";
import { useFocusList } from "../../../../hooks/useFocusList/useFocusList.js";
import { Skeleton } from "../../../Skeleton/Skeleton.js";
import { Body } from "../../../Body/Body.js";
import { useComponents } from "../../../ComponentsContext/useComponents.js";
import { Badge } from "../../../Badge/Badge.js";
function SecondaryLink({
  label,
  badge,
  tier,
  isActive,
  ...props
}) {
  if (process.env.NODE_ENV !== "production" && tier && badge) {
    throw new CircuitError(
      "SideNavigation",
      "The `badge` and `tier` props cannot be used simultaneously."
    );
  }
  const { Link } = useComponents();
  const Element = props.href ? Link : "button";
  return /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsxs(
    Element,
    {
      ...props,
      className: clsx(
        classes.anchor,
        sharedClasses.navigationItem,
        utilClasses.focusVisibleInset
      ),
      "aria-current": isActive ? "page" : void 0,
      children: [
        /* @__PURE__ */ jsx(Skeleton, { className: classes.label, children: /* @__PURE__ */ jsx(Body, { as: "span", size: "m", weight: isActive ? "bold" : void 0, children: label }) }),
        badge && /* @__PURE__ */ jsx(Badge, { variant: "promo", as: "span", ...badge }),
        tier && /* @__PURE__ */ jsx(TierIndicator, { ...tier, size: "s" })
      ]
    }
  ) });
}
function SecondaryGroup({
  label,
  secondaryLinks,
  focusProps
}) {
  return /* @__PURE__ */ jsxs("li", { children: [
    label && /* @__PURE__ */ jsx(Skeleton, { className: classes["group-headline"], as: "div", children: /* @__PURE__ */ jsx(
      Body,
      {
        color: "subtle",
        className: classes.headline,
        weight: "semibold",
        as: "h3",
        size: "s",
        children: label
      }
    ) }),
    /* @__PURE__ */ jsx("ul", { role: "list", className: classes.list, children: secondaryLinks.map((link) => /* @__PURE__ */ jsx(SecondaryLink, { ...link, ...focusProps }, link.label)) })
  ] });
}
const SecondaryLinks = forwardRef(
  ({ secondaryGroups, className, ...props }, ref) => {
    const focusProps = useFocusList();
    return /* @__PURE__ */ jsx(
      "ul",
      {
        role: "list",
        ref,
        className: clsx(classes.list, className),
        ...props,
        children: secondaryGroups.map((group) => /* @__PURE__ */ jsx(
          SecondaryGroup,
          {
            ...group,
            focusProps
          },
          group.label
        ))
      }
    );
  }
);
SecondaryLinks.displayName = "SecondaryLinks";
export {
  SecondaryLinks
};
