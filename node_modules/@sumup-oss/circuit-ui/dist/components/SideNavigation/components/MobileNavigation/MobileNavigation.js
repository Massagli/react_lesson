"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { Fragment } from "react";
import ReactModal from "react-modal";
import { ChevronDown } from "@sumup-oss/icons";
import { ComponentsContext, defaultComponents } from "../../../ComponentsContext/ComponentsContext.js";
import { clsx } from "../../../../styles/clsx.js";
import classes from "./MobileNavigation.module.css.js";
import { createUseModal } from "../../../ModalContext/createUseModal.js";
import { useFocusList } from "../../../../hooks/useFocusList/useFocusList.js";
import { StackContext } from "../../../StackContext/StackContext.js";
import { SkipLink } from "../../../SkipLink/SkipLink.js";
import { CloseButton } from "../../../CloseButton/CloseButton.js";
import { PrimaryLink } from "../PrimaryLink/PrimaryLink.js";
import { useCollapsible } from "../../../../hooks/useCollapsible/useCollapsible.js";
import { SecondaryLinks } from "../SecondaryLinks/SecondaryLinks.js";
const TRANSITION_DURATION = 120;
function combineClickHandlers(...fns) {
  return (event) => {
    fns.forEach((fn) => {
      if (fn) {
        fn(event);
      }
    });
  };
}
function Group({
  secondaryGroups,
  href,
  onClose,
  ...props
}) {
  const { getButtonProps, getContentProps } = useCollapsible();
  const mappedSecondaryGroups = secondaryGroups.map(
    ({ secondaryLinks, ...group }) => ({
      ...group,
      secondaryLinks: secondaryLinks.map(({ onClick, ...link }) => ({
        ...link,
        onClick: combineClickHandlers(onClick, onClose)
      }))
    })
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      PrimaryLink,
      {
        ...props,
        ...getButtonProps(),
        suffix: ({ className, ...suffixProps }) => /* @__PURE__ */ jsx(
          ChevronDown,
          {
            ...suffixProps,
            className: clsx(className, classes.chevron),
            size: "16"
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(
      SecondaryLinks,
      {
        ...getContentProps(),
        className: classes.group,
        secondaryGroups: mappedSecondaryGroups
      }
    )
  ] });
}
const MobileNavigation = ({
  onClose,
  closeButtonLabel,
  primaryLinks,
  primaryNavigationLabel,
  UNSAFE_components = defaultComponents,
  skipNavigationHref,
  skipNavigationLabel,
  ...props
}) => {
  const focusProps = useFocusList();
  const reactModalProps = {
    className: {
      base: classes.base,
      afterOpen: classes.open,
      beforeClose: classes.closed
    },
    overlayClassName: {
      base: classes.overlay,
      afterOpen: classes["overlay-open"],
      beforeClose: classes["overlay-closed"]
    },
    onRequestClose: onClose,
    closeTimeoutMS: TRANSITION_DURATION,
    shouldCloseOnOverlayClick: true,
    shouldCloseOnEsc: true,
    ...props
  };
  return /* @__PURE__ */ jsx(ComponentsContext.Provider, { value: UNSAFE_components, children: /* @__PURE__ */ jsx(StackContext.Provider, { value: "var(--cui-z-index-modal)", children: /* @__PURE__ */ jsx(ReactModal, { ...reactModalProps, children: /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
    skipNavigationHref && skipNavigationLabel && /* @__PURE__ */ jsx(SkipLink, { href: skipNavigationHref, children: skipNavigationLabel }),
    /* @__PURE__ */ jsx("div", { className: classes.header, children: /* @__PURE__ */ jsx(CloseButton, { onClick: onClose, children: closeButtonLabel }) }),
    /* @__PURE__ */ jsx("nav", { "aria-label": primaryNavigationLabel, children: /* @__PURE__ */ jsx("ul", { className: classes.list, children: primaryLinks.map(({ secondaryGroups, onClick, ...link }) => /* @__PURE__ */ jsx("li", { children: secondaryGroups && secondaryGroups.length > 0 ? /* @__PURE__ */ jsx(
      Group,
      {
        ...link,
        secondaryGroups,
        onClose,
        ...focusProps
      }
    ) : /* @__PURE__ */ jsx(
      PrimaryLink,
      {
        ...link,
        ...focusProps,
        onClick: combineClickHandlers(onClick, onClose)
      }
    ) }, link.label)) }) })
  ] }) }) }) });
};
MobileNavigation.TRANSITION_DURATION = TRANSITION_DURATION;
const useMobileNavigation = createUseModal(MobileNavigation);
export {
  MobileNavigation,
  useMobileNavigation
};
