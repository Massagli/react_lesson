"use strict";
"use client";
import { jsxs, Fragment, jsx } from "react/jsx-runtime";
import { ArrowRight } from "@sumup-oss/icons";
import { useId } from "react";
import { isObject } from "../../../../util/type-check.js";
import { clsx } from "../../../../styles/clsx.js";
import { utilClasses } from "../../../../styles/utility.js";
import classes from "./PrimaryLink.module.css.js";
import { useComponents } from "../../../ComponentsContext/useComponents.js";
import { Skeleton } from "../../../Skeleton/Skeleton.js";
import { Body } from "../../../Body/Body.js";
function PrimaryLink({
  icon,
  activeIcon,
  label,
  isActive,
  isExternal,
  externalLabel,
  suffix: Suffix,
  badge,
  secondaryGroups,
  className,
  "aria-describedby": descriptionId,
  ...props
}) {
  const { Link } = useComponents();
  const badgeLabelId = useId();
  const externalLabelId = useId();
  const badgeProps = getBadgeProps(badge);
  const descriptionIds = clsx(
    (badgeProps == null ? void 0 : badgeProps.label) && badgeLabelId,
    externalLabel && externalLabelId,
    descriptionId
  );
  const Element = props.href ? Link : "button";
  const suffix = Suffix && /* @__PURE__ */ jsx(Suffix, { className: classes.suffix, "aria-hidden": "true" });
  const isExternalLink = isExternal || props.target === "_blank";
  const Icon = isActive && activeIcon ? activeIcon : icon;
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs(
      Element,
      {
        ...props,
        className: clsx(classes.base, utilClasses.focusVisibleInset, className),
        "aria-current": isActive ? "page" : void 0,
        "aria-describedby": descriptionIds,
        children: [
          /* @__PURE__ */ jsx(
            Skeleton,
            {
              className: clsx(
                classes.icon,
                badgeProps && classes.badge,
                badgeProps && classes[badgeProps.variant]
              ),
              children: /* @__PURE__ */ jsx(Icon, { "aria-hidden": "true", size: "24" })
            }
          ),
          /* @__PURE__ */ jsx(Skeleton, { children: /* @__PURE__ */ jsx(Body, { as: "span", className: classes.label, children: label }) }),
          isExternalLink && /* @__PURE__ */ jsx(
            ArrowRight,
            {
              size: "16",
              "aria-hidden": "true",
              className: clsx(classes.suffix, classes["external-icon"])
            }
          ),
          suffix
        ]
      }
    ),
    (badgeProps == null ? void 0 : badgeProps.label) && /* @__PURE__ */ jsx("span", { id: badgeLabelId, className: utilClasses.hideVisually, children: badgeProps.label }),
    isExternalLink && externalLabel && /* @__PURE__ */ jsx("span", { id: externalLabelId, className: utilClasses.hideVisually, children: externalLabel })
  ] });
}
function getBadgeProps(badge) {
  if (!badge) {
    return null;
  }
  const defaultProps = { variant: "promo", label: "" };
  return isObject(badge) ? { ...defaultProps, ...badge } : defaultProps;
}
export {
  PrimaryLink
};
