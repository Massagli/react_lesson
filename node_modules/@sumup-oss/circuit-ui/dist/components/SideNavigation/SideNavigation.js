"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { useEffect } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { useMedia } from "../../hooks/useMedia/useMedia.js";
import { useMobileNavigation } from "./components/MobileNavigation/MobileNavigation.js";
import { usePrevious } from "../../hooks/usePrevious/usePrevious.js";
import { DesktopNavigation } from "./components/DesktopNavigation/DesktopNavigation.js";
function SideNavigation({
  isLoading,
  isOpen,
  onClose,
  primaryLinks,
  closeButtonLabel,
  primaryNavigationLabel,
  secondaryNavigationLabel,
  UNSAFE_components,
  skipNavigationLabel,
  skipNavigationHref
}) {
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
    if (!isSufficientlyLabelled(closeButtonLabel)) {
      throw new AccessibilityError(
        "SideNavigation",
        "The `closeButtonLabel` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(primaryNavigationLabel)) {
      throw new AccessibilityError(
        "SideNavigation",
        "The `primaryNavigationLabel` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(secondaryNavigationLabel)) {
      throw new AccessibilityError(
        "SideNavigation",
        "The `secondaryNavigationLabel` prop is missing or invalid."
      );
    }
  }
  const isMobile = useMedia("(max-width: 1279px)", true);
  const { setModal, removeModal } = useMobileNavigation();
  const prevOpen = usePrevious(isOpen);
  useEffect(() => {
    if (!prevOpen && isOpen && isMobile) {
      setModal({
        onClose,
        primaryLinks,
        closeButtonLabel,
        primaryNavigationLabel,
        UNSAFE_components,
        skipNavigationLabel,
        skipNavigationHref
      });
    }
  }, [
    prevOpen,
    isOpen,
    isMobile,
    setModal,
    primaryLinks,
    onClose,
    closeButtonLabel,
    primaryNavigationLabel,
    UNSAFE_components,
    skipNavigationLabel,
    skipNavigationHref
  ]);
  useEffect(() => {
    if (!isMobile) {
      removeModal();
    }
  }, [isMobile, removeModal]);
  return /* @__PURE__ */ jsx(
    DesktopNavigation,
    {
      isLoading,
      primaryLinks,
      primaryNavigationLabel,
      secondaryNavigationLabel,
      skipNavigationLabel,
      skipNavigationHref
    }
  );
}
export {
  SideNavigation
};
