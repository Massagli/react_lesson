"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId, createElement } from "react";
import { SelectorGroupContext, Selector } from "../Selector/Selector.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { isEmpty } from "../../util/helpers.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./SelectorGroup.module.css.js";
import { FieldSet, FieldLegend, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
function isChecked(option, value = [], multiple) {
  return multiple ? value.includes(option.value) : value === option.value;
}
const SelectorGroup = forwardRef(
  ({
    options,
    onChange,
    onBlur,
    value,
    defaultValue,
    name: customName,
    "aria-describedby": descriptionId,
    label,
    required,
    optionalLabel,
    disabled,
    multiple,
    size,
    stretch = false,
    validationHint,
    invalid,
    hideLabel,
    ...props
  }, ref) => {
    const randomName = useId();
    const name = customName || randomName;
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "SelectorGroup",
        "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    if (isEmpty(options)) {
      return null;
    }
    return /* @__PURE__ */ jsxs(
      FieldSet,
      {
        name,
        "aria-describedby": descriptionIds,
        ref,
        disabled,
        role: multiple ? void 0 : "radiogroup",
        "aria-orientation": multiple ? void 0 : "horizontal",
        ...props,
        children: [
          /* @__PURE__ */ jsx(FieldLegend, { children: /* @__PURE__ */ jsx(
            FieldLabelText,
            {
              label,
              hideLabel,
              optionalLabel,
              required
            }
          ) }),
          /* @__PURE__ */ jsx("div", { className: clsx(classes.base, stretch && classes.stretch), children: /* @__PURE__ */ jsx(SelectorGroupContext.Provider, { value: true, children: options.map((option) => /* @__PURE__ */ createElement(
            Selector,
            {
              ...option,
              key: option.value || option.label,
              className: clsx(classes.option, option.className),
              name,
              onChange,
              onBlur,
              multiple,
              size,
              disabled: disabled || option.disabled,
              invalid: invalid || option.invalid,
              checked: value ? isChecked(option, value, multiple) : option.checked,
              defaultChecked: defaultValue ? isChecked(option, defaultValue, multiple) : option.defaultChecked
            }
          )) }) }),
          /* @__PURE__ */ jsx(
            FieldValidationHint,
            {
              id: validationHintId,
              invalid,
              disabled,
              validationHint
            }
          )
        ]
      }
    );
  }
);
SelectorGroup.displayName = "SelectorGroup";
export {
  SelectorGroup
};
