"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import inputClasses from "./Input.module.css.js";
import { FieldWrapper, FieldLabel, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
const Input = forwardRef(
  ({
    value,
    renderPrefix: RenderPrefix,
    renderSuffix: RenderSuffix,
    validationHint,
    optionalLabel,
    required,
    invalid,
    hasWarning,
    showValid,
    disabled,
    textAlign,
    inputClassName,
    as: Element = "input",
    label,
    hideLabel,
    id: customId,
    className,
    style,
    "aria-describedby": descriptionId,
    ...props
  }, ref) => {
    const id = useId();
    const inputId = customId || id;
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    const prefix = RenderPrefix && /* @__PURE__ */ jsx(RenderPrefix, { className: inputClasses.prefix });
    const suffix = RenderSuffix && /* @__PURE__ */ jsx(RenderSuffix, { className: inputClasses.suffix });
    const hasPrefix = Boolean(prefix);
    const hasSuffix = Boolean(suffix);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && props.type !== "hidden" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Input",
        "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(FieldLabel, { htmlFor: inputId, children: /* @__PURE__ */ jsx(
        FieldLabelText,
        {
          label,
          hideLabel,
          optionalLabel,
          required
        }
      ) }),
      /* @__PURE__ */ jsxs("div", { className: inputClasses.wrapper, children: [
        prefix,
        /* @__PURE__ */ jsx(
          Element,
          {
            id: inputId,
            value,
            ref,
            "aria-describedby": descriptionIds,
            className: clsx(
              inputClasses.base,
              !disabled && hasWarning && inputClasses.warning,
              textAlign === "right" && inputClasses["align-right"],
              hasPrefix && inputClasses["has-prefix"],
              hasSuffix && inputClasses["has-suffix"],
              inputClassName
            ),
            "aria-invalid": invalid && "true",
            required,
            disabled,
            ...props
          }
        ),
        suffix
      ] }),
      /* @__PURE__ */ jsx(
        FieldValidationHint,
        {
          id: validationHintId,
          disabled,
          invalid,
          hasWarning,
          showValid,
          validationHint
        }
      )
    ] });
  }
);
Input.displayName = "Input";
export {
  Input,
  inputClasses as classes
};
