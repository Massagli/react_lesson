"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { useRef, useId, useState } from "react";
import { Delete, Plus } from "@sumup-oss/icons";
import { utilClasses } from "../../styles/utility.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./ImageInput.module.css.js";
import { FieldWrapper, FieldLabelText, FieldLabel, FieldValidationHint } from "../Field/Field.js";
import { IconButton } from "../Button/IconButton.js";
import { Spinner } from "../Spinner/Spinner.js";
const ImageInput = ({
  label,
  src,
  id: customId,
  clearButtonLabel,
  onChange,
  onClear,
  disabled,
  validationHint,
  required,
  invalid = false,
  optionalLabel,
  loadingLabel,
  hideLabel = true,
  component: Component,
  className,
  style,
  "aria-describedby": descriptionId,
  ...props
}) => {
  const inputRef = useRef(null);
  const id = useId();
  const inputId = customId || id;
  const validationHintId = useId();
  const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
  const [isLoading, setIsLoading] = useState(false);
  const [isDragging, setDragging] = useState(false);
  const [previewImage, setPreviewImage] = useState("");
  const handleChange = (files) => {
    const file = files == null ? void 0 : files[0];
    if (!file) {
      return;
    }
    setPreviewImage("");
    setIsLoading(true);
    setPreviewImage(URL.createObjectURL(file));
    Promise.resolve(onChange(file)).then(() => setIsLoading(false)).catch(() => setIsLoading(false));
  };
  const handleInputChange = (event) => handleChange(event.target.files);
  const clearInputElement = () => {
    if (inputRef.current) {
      inputRef.current.value = "";
    }
  };
  const handleClear = (event) => {
    Promise.resolve(onClear(event)).then(() => {
      clearInputElement();
      setPreviewImage("");
    }).catch(() => {
      clearInputElement();
      setPreviewImage("");
    });
  };
  const handleClick = () => {
    clearInputElement();
  };
  const handlePaste = (event) => {
    const { files } = event.clipboardData;
    handleChange(files);
    if (inputRef.current && files) {
      if (process.env.NODE_ENV !== "test") {
        inputRef.current.files = files;
      }
    }
  };
  const handleDragging = (event) => {
    event.preventDefault();
    event.stopPropagation();
    setDragging(true);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.stopPropagation();
    setDragging(false);
  };
  const handleDrop = (event) => {
    var _a;
    handleDragLeave(event);
    const files = (_a = event.dataTransfer) == null ? void 0 : _a.files;
    handleChange(files);
    if (inputRef.current && files) {
      if (process.env.NODE_ENV !== "test") {
        inputRef.current.files = files;
      }
    }
  };
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
    if (!isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "ImageInput",
        "The `label` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(clearButtonLabel)) {
      throw new AccessibilityError(
        "ImageInput",
        "The `clearButtonLabel` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(loadingLabel)) {
      throw new AccessibilityError(
        "ImageInput",
        "The `loadingLabel` prop is missing or invalid."
      );
    }
  }
  return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
    /* @__PURE__ */ jsx(
      FieldLabelText,
      {
        label,
        hideLabel,
        optionalLabel,
        required,
        "aria-hidden": "true"
      }
    ),
    /* @__PURE__ */ jsxs("div", { onPaste: handlePaste, className: classes.base, children: [
      /* @__PURE__ */ jsx(
        "input",
        {
          className: clsx(classes.input, utilClasses.hideVisually),
          ref: inputRef,
          id: inputId,
          type: "file",
          accept: "image/*",
          onChange: handleInputChange,
          onClick: handleClick,
          required,
          disabled: disabled || isLoading,
          "aria-invalid": invalid && "true",
          "aria-describedby": descriptionIds,
          ...props
        }
      ),
      /* @__PURE__ */ jsxs(
        FieldLabel,
        {
          htmlFor: inputId,
          onDragEnter: handleDragging,
          onDragOver: handleDragging,
          onDragLeave: handleDragLeave,
          onDrop: handleDrop,
          className: clsx(
            classes.label,
            isLoading && classes.loading,
            isDragging && classes.dragging
          ),
          children: [
            /* @__PURE__ */ jsx("span", { className: utilClasses.hideVisually, children: label }),
            /* @__PURE__ */ jsx(Component, { src: src || previewImage, "aria-hidden": "true" })
          ]
        }
      ),
      src ? /* @__PURE__ */ jsx(
        IconButton,
        {
          type: "button",
          size: "s",
          variant: "secondary",
          destructive: true,
          onClick: handleClear,
          disabled: isLoading || disabled,
          className: classes.button,
          icon: Delete,
          children: clearButtonLabel
        }
      ) : /* @__PURE__ */ jsx(
        IconButton,
        {
          type: "button",
          size: "s",
          variant: "secondary",
          "aria-hidden": "true",
          tabIndex: -1,
          disabled: isLoading || disabled,
          className: clsx(classes.button, classes.add),
          icon: Plus
        }
      ),
      /* @__PURE__ */ jsx(
        Spinner,
        {
          className: clsx(classes.spinner, isLoading && classes.loading),
          children: /* @__PURE__ */ jsx("span", { className: utilClasses.hideVisually, children: loadingLabel })
        }
      )
    ] }),
    /* @__PURE__ */ jsx(
      FieldValidationHint,
      {
        id: validationHintId,
        validationHint,
        invalid
      }
    )
  ] });
};
export {
  ImageInput
};
