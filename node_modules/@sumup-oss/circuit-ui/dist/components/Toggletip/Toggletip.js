"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useId, useState, useEffect, useCallback, Fragment } from "react";
import { useFloating, offset, flip, shift, arrow } from "@floating-ui/react-dom";
import dialogPolyfill from "../../vendor/dialog-polyfill/index.js";
import { clsx } from "../../styles/clsx.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { useI18n } from "../../hooks/useI18n/useI18n.js";
import classes from "./Toggletip.module.css.js";
import { translations } from "./translations/index.js";
import { useStackContext } from "../StackContext/StackContext.js";
import { useMedia } from "../../hooks/useMedia/useMedia.js";
import { useClickOutside } from "../../hooks/useClickOutside/useClickOutside.js";
import { useEscapeKey } from "../../hooks/useEscapeKey/useEscapeKey.js";
import { Headline } from "../Headline/Headline.js";
import { Body } from "../Body/Body.js";
import { Button } from "../Button/Button.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const Toggletip = forwardRef(
  (props, ref) => {
    var _a, _b;
    const {
      defaultOpen = false,
      placement: defaultPlacement = "top",
      offset: offset$1 = 12,
      headline,
      body,
      action,
      component: Component,
      closeButtonLabel,
      className,
      style,
      locale,
      ...rest
    } = useI18n(props, translations);
    const zIndex = useStackContext();
    const isMobile = useMedia("(max-width: 479px)");
    const arrowRef = useRef(null);
    const dialogRef = useRef(null);
    const referenceId = useId();
    const headlineId = useId();
    const bodyId = useId();
    const [open, setOpen] = useState(defaultOpen);
    useEffect(() => {
      const dialogElement = dialogRef.current;
      if (!dialogElement) {
        return void 0;
      }
      dialogPolyfill.registerDialog(dialogElement);
      const handleClose = () => {
        setOpen(false);
      };
      dialogElement.addEventListener("close", handleClose);
      return () => {
        dialogElement.addEventListener("close", handleClose);
      };
    }, []);
    const { refs, floatingStyles, middlewareData, update, placement } = useFloating({
      open,
      placement: defaultPlacement,
      middleware: [
        offset(offset$1),
        flip(),
        shift(),
        arrow({ element: arrowRef, padding: 12 })
      ]
    });
    useEffect(() => {
      const referenceElement = document.getElementById(referenceId);
      refs.setReference(referenceElement);
    });
    useEffect(() => {
      if (open) {
        update();
        window.addEventListener("resize", update);
        window.addEventListener("scroll", update);
      } else {
        window.removeEventListener("resize", update);
        window.removeEventListener("scroll", update);
      }
      return () => {
        window.removeEventListener("resize", update);
        window.removeEventListener("scroll", update);
      };
    }, [open, update]);
    const closeDialog = useCallback(() => {
      var _a2;
      (_a2 = dialogRef.current) == null ? void 0 : _a2.close();
    }, []);
    useClickOutside(
      [refs.floating, refs.reference],
      closeDialog,
      open
    );
    useEscapeKey(closeDialog, open);
    const handleReferenceClick = useCallback(() => {
      if (dialogRef.current) {
        dialogRef.current.show();
        setOpen(true);
      }
    }, []);
    const handleActionClick = (event) => {
      var _a2;
      (_a2 = action == null ? void 0 : action.onClick) == null ? void 0 : _a2.call(action, event);
      closeDialog();
    };
    const side = placement.split("-")[0];
    const mobileStyles = {
      position: "fixed",
      bottom: "0px",
      left: "0px",
      right: "0px"
    };
    const dialogStyles = isMobile ? mobileStyles : floatingStyles;
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        Component,
        {
          id: referenceId,
          "aria-haspopup": "dialog",
          onClick: handleReferenceClick
        }
      ),
      /* @__PURE__ */ jsxs(
        "dialog",
        {
          ...rest,
          open: defaultOpen,
          ref: applyMultipleRefs(ref, dialogRef, refs.setFloating),
          "data-side": side,
          "aria-labelledby": headline ? headlineId : bodyId,
          "aria-describedby": headline ? bodyId : void 0,
          className: clsx(classes.base, className),
          style: {
            ...style,
            ...dialogStyles,
            zIndex: zIndex || "var(--cui-z-index-modal)"
          },
          children: [
            /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
              headline && /* @__PURE__ */ jsx(
                Headline,
                {
                  as: "h2",
                  size: "s",
                  id: headlineId,
                  className: classes.headline,
                  children: headline
                }
              ),
              /* @__PURE__ */ jsx(Body, { size: "s", id: bodyId, className: classes.body, children: body }),
              action && /* @__PURE__ */ jsx(
                Button,
                {
                  ...action,
                  onClick: handleActionClick,
                  variant: "secondary",
                  size: "s",
                  className: classes.action,
                  autoFocus: true
                }
              ),
              /* @__PURE__ */ jsx(
                CloseButton,
                {
                  size: "s",
                  variant: "tertiary",
                  className: classes.close,
                  onClick: closeDialog,
                  autoFocus: !action,
                  children: closeButtonLabel
                }
              )
            ] }),
            /* @__PURE__ */ jsx(
              "div",
              {
                ref: arrowRef,
                className: classes.arrow,
                style: {
                  top: (_a = middlewareData.arrow) == null ? void 0 : _a.y,
                  left: (_b = middlewareData.arrow) == null ? void 0 : _b.x
                }
              }
            )
          ]
        }
      ),
      /* @__PURE__ */ jsx(
        "div",
        {
          className: classes.backdrop,
          style: {
            zIndex: `calc(${(zIndex == null ? void 0 : zIndex.toString()) || "var(--cui-z-index-modal)"} - 1)`
          }
        }
      )
    ] });
  }
);
Toggletip.displayName = "Toggletip";
export {
  Toggletip
};
