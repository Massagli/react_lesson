"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { Checkbox } from "../Checkbox/Checkbox.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { isEmpty } from "../../util/helpers.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./CheckboxGroup.module.css.js";
import { FieldSet, FieldLegend, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
const CheckboxGroup = forwardRef(
  ({
    options,
    value,
    defaultValue,
    onChange,
    onBlur,
    name,
    label,
    invalid,
    validationHint,
    showValid,
    disabled,
    hasWarning,
    hideLabel,
    optionalLabel,
    required,
    "aria-describedby": descriptionId,
    ...props
  }, ref) => {
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "CheckboxGroup",
        "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    if (isEmpty(options)) {
      return null;
    }
    return /* @__PURE__ */ jsxs(
      FieldSet,
      {
        "aria-describedby": descriptionIds,
        name,
        ref,
        disabled,
        ...props,
        children: [
          /* @__PURE__ */ jsx(FieldLegend, { children: /* @__PURE__ */ jsx(
            FieldLabelText,
            {
              label,
              hideLabel,
              required,
              optionalLabel
            }
          ) }),
          /* @__PURE__ */ jsx("ul", { className: classes.base, children: options.map((option) => /* @__PURE__ */ jsx("li", { children: /* @__PURE__ */ jsx(
            Checkbox,
            {
              ...option,
              name,
              onChange,
              onBlur,
              disabled: disabled || option.disabled,
              invalid: invalid || option.invalid,
              checked: value ? value.includes(option.value) : option.checked,
              defaultChecked: defaultValue ? defaultValue.includes(option.value) : option.defaultChecked
            }
          ) }, option.value || option.label)) }),
          /* @__PURE__ */ jsx(
            FieldValidationHint,
            {
              id: validationHintId,
              invalid,
              showValid,
              disabled,
              hasWarning,
              validationHint
            }
          )
        ]
      }
    );
  }
);
CheckboxGroup.displayName = "CheckboxGroup";
export {
  CheckboxGroup
};
