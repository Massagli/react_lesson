"use strict";
"use client";
import { jsxs, Fragment, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./RadioButtonInput.module.css.js";
const RadioButtonInput = forwardRef(
  ({ id: customId, className, style, children, align = "center", ...props }, ref) => {
    const id = useId();
    const inputId = customId || id;
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(children, props)) {
      throw new AccessibilityError(
        "RadioButtonInput",
        "The input is missing a valid label."
      );
    }
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        "input",
        {
          ...props,
          ref,
          id: inputId,
          type: "radio",
          className: clsx(classes.base, utilClasses.hideVisually)
        }
      ),
      /* @__PURE__ */ jsx(
        "label",
        {
          htmlFor: inputId,
          className: clsx(className, classes.label, classes[align]),
          style,
          children
        }
      )
    ] });
  }
);
RadioButtonInput.displayName = "RadioButtonInput";
export {
  RadioButtonInput
};
