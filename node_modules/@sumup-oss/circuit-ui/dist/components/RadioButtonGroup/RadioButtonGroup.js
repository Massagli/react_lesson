"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId, createElement } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { isEmpty } from "../../util/helpers.js";
import { clsx } from "../../styles/clsx.js";
import { RadioButton } from "../RadioButton/RadioButton.js";
import classes from "./RadioButtonGroup.module.css.js";
import { FieldSet, FieldLegend, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
const RadioButtonGroup = forwardRef(
  ({
    options,
    onChange,
    onBlur,
    value,
    defaultValue,
    name: customName,
    label,
    invalid,
    validationHint,
    showValid,
    disabled,
    hasWarning,
    hideLabel,
    optionalLabel,
    required,
    "aria-describedby": descriptionId,
    ...props
  }, ref) => {
    const randomName = useId();
    const name = customName || randomName;
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "RadioButtonGroup",
        "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    if (isEmpty(options)) {
      return null;
    }
    return /* @__PURE__ */ jsxs(
      FieldSet,
      {
        role: "radiogroup",
        "aria-describedby": descriptionIds,
        "aria-orientation": "vertical",
        "aria-invalid": invalid && "true",
        "aria-required": required && "true",
        name,
        ref,
        disabled,
        ...props,
        children: [
          /* @__PURE__ */ jsx(FieldLegend, { children: /* @__PURE__ */ jsx(
            FieldLabelText,
            {
              label,
              hideLabel,
              optionalLabel,
              required
            }
          ) }),
          /* @__PURE__ */ jsx("div", { className: classes.base, children: options.map((option) => {
            var _a;
            return /* @__PURE__ */ createElement(
              RadioButton,
              {
                ...option,
                key: ((_a = option.value) == null ? void 0 : _a.toString()) || option.label,
                disabled: disabled || option.disabled,
                name,
                onChange,
                onBlur,
                checked: value ? option.value === value : option.checked,
                defaultChecked: defaultValue ? option.value === defaultValue : option.defaultChecked
              }
            );
          }) }),
          /* @__PURE__ */ jsx(
            FieldValidationHint,
            {
              id: validationHintId,
              invalid,
              showValid,
              disabled,
              hasWarning,
              validationHint
            }
          )
        ]
      }
    );
  }
);
RadioButtonGroup.displayName = "RadioButtonGroup";
export {
  RadioButtonGroup
};
