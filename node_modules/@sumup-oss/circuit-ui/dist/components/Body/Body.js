"use strict";
import { jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { clsx } from "../../styles/clsx.js";
import { deprecate } from "../../util/logger.js";
import classes from "./Body.module.css.js";
function getHTMLElement(variant) {
  if (variant === "highlight") {
    return "strong";
  }
  if (variant === "quote") {
    return "blockquote";
  }
  return "p";
}
function getDefaultWeight(as) {
  if (as === "strong") {
    return "semibold";
  }
  return "regular";
}
const deprecatedSizeMap = {
  "one": "m",
  "two": "s"
};
const Body = forwardRef(
  ({
    className,
    as,
    size: legacySize = "m",
    weight = getDefaultWeight(as),
    decoration,
    color = "normal",
    variant,
    ...props
  }, ref) => {
    const Element = as || getHTMLElement(variant);
    if (process.env.NODE_ENV !== "production") {
      if (variant) {
        if (variant === "highlight") {
          deprecate(
            "Body",
            'The "highlight" variant has been deprecated. Use the new `weight` prop instead.'
          );
        } else if (variant === "quote") {
          deprecate(
            "Body",
            'The "quote" variant has been deprecated. Use custom CSS instead.'
          );
        } else {
          deprecate(
            "Body",
            `The "${variant}" variant has been deprecated. Use the new \`color\` prop instead.`
          );
        }
      }
      if (legacySize in deprecatedSizeMap) {
        deprecate(
          "Body",
          `The "${legacySize}" size has been deprecated. Use the "${deprecatedSizeMap[legacySize]}" size instead.`
        );
      }
    }
    const size = deprecatedSizeMap[legacySize] || legacySize;
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...props,
        ref,
        className: clsx(
          classes.base,
          classes[size],
          classes[weight],
          classes[color],
          decoration && classes[decoration],
          variant && classes[variant],
          className
        )
      }
    );
  }
);
Body.displayName = "Body";
export {
  Body,
  deprecatedSizeMap
};
