"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { forwardRef, useRef } from "react";
import { Search } from "@sumup-oss/icons";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./SearchInput.module.css.js";
import { Input } from "../Input/Input.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const SearchInput = forwardRef(
  ({ value, onClear, clearLabel, inputClassName, ...props }, ref) => {
    const localRef = useRef(null);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && onClear && !isSufficientlyLabelled(clearLabel)) {
      throw new AccessibilityError(
        "SearchInput",
        "The `clearLabel` prop is missing or invalid. Omit the `onClear` prop if you intend to disable the input clearing functionality."
      );
    }
    const onClick = (event) => {
      var _a;
      onClear == null ? void 0 : onClear(event);
      (_a = localRef.current) == null ? void 0 : _a.focus();
    };
    return /* @__PURE__ */ jsx(
      Input,
      {
        value,
        type: "search",
        renderPrefix: (renderProps) => /* @__PURE__ */ jsx(Search, { size: "16", ...renderProps }),
        ...value && onClear && clearLabel ? {
          renderSuffix: (renderProps) => /* @__PURE__ */ jsx(CloseButton, { ...renderProps, size: "s", onClick, children: clearLabel })
        } : {},
        inputClassName: clsx(classes.base, inputClassName),
        ...props,
        ref: applyMultipleRefs(localRef, ref)
      }
    );
  }
);
SearchInput.displayName = "SearchInput";
export {
  SearchInput
};
