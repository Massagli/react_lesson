"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { Body } from "../Body/Body.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./Anchor.module.css.js";
import { useComponents } from "../ComponentsContext/useComponents.js";
const Anchor = forwardRef(
  ({
    className,
    externalLabel,
    "aria-describedby": descriptionId,
    children,
    ...props
  }, ref) => {
    const components = useComponents();
    const Link = components.Link;
    const isExternalLink = props.rel === "external" || props.target === "_blank";
    const externalLabelId = useId();
    const descriptionIds = clsx(externalLabel && isExternalLink && externalLabelId, descriptionId) || void 0;
    if (!props.href && !props.onClick) {
      return /* @__PURE__ */ jsx(Body, { as: "span", ...props, ref, children });
    }
    if (props.href) {
      return /* @__PURE__ */ jsxs(
        Body,
        {
          ...props,
          "aria-describedby": descriptionIds,
          className: clsx(classes.base, utilClasses.focusVisible, className),
          as: Link,
          ref,
          children: [
            children,
            isExternalLink && externalLabel && /* @__PURE__ */ jsx(
              "span",
              {
                "aria-hidden": true,
                id: externalLabelId,
                className: utilClasses.hideVisually,
                children: externalLabel
              }
            )
          ]
        }
      );
    }
    return /* @__PURE__ */ jsxs(
      Body,
      {
        as: "button",
        ...props,
        "aria-describedby": descriptionIds,
        className: clsx(classes.base, utilClasses.focusVisible, className),
        ref,
        children: [
          children,
          isExternalLink && externalLabel && /* @__PURE__ */ jsx(
            "span",
            {
              "aria-hidden": true,
              id: externalLabelId,
              className: utilClasses.hideVisually,
              children: externalLabel
            }
          )
        ]
      }
    );
  }
);
Anchor.displayName = "Anchor";
export {
  Anchor
};
