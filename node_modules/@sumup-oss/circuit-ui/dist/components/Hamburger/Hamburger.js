"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { IconButton } from "../Button/IconButton.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { deprecate } from "../../util/logger.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./Hamburger.module.css.js";
import { legacyButtonSizeMap } from "../Button/base.js";
import { Skeleton } from "../Skeleton/Skeleton.js";
const Hamburger = forwardRef(
  ({
    isActive = false,
    activeLabel,
    inactiveLabel,
    size: legacySize = "m",
    className,
    ...props
  }, ref) => {
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
      if (!isSufficientlyLabelled(activeLabel)) {
        throw new AccessibilityError(
          "Hamburger",
          "The `activeLabel` prop is missing or invalid."
        );
      }
      if (!isSufficientlyLabelled(inactiveLabel)) {
        throw new AccessibilityError(
          "Hamburger",
          "The `inactiveLabel` prop is missing or invalid."
        );
      }
    }
    if (process.env.NODE_ENV !== "production" && legacyButtonSizeMap[legacySize]) {
      deprecate(
        "Hamburger",
        `The \`${legacySize}\` size has been deprecated. Use the \`${legacyButtonSizeMap[legacySize]}\` size instead.`
      );
    }
    const size = legacyButtonSizeMap[legacySize] || legacySize;
    return /* @__PURE__ */ jsx(
      IconButton,
      {
        ...props,
        icon: ({ size: _size, ...iconProps }) => (
          // @ts-expect-error This doesn't have to be an SVG element.
          /* @__PURE__ */ jsx(
            Skeleton,
            {
              ...iconProps,
              className: clsx(
                iconProps.className,
                classes.skeleton,
                classes[size]
              ),
              children: /* @__PURE__ */ jsx("span", { className: clsx(classes.base, classes[size]) })
            }
          )
        ),
        className: clsx(classes.button, className),
        size,
        type: "button",
        ref,
        children: isActive ? activeLabel : inactiveLabel
      }
    );
  }
);
export {
  Hamburger
};
