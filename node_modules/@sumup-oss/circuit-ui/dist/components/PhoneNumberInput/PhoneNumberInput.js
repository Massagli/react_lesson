"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useId, useMemo } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { eachFn } from "../../util/helpers.js";
import { changeInputValue } from "../../util/input-value.js";
import { clsx } from "../../styles/clsx.js";
import { mapCountryCodeOptions, parsePhoneNumber, normalizePhoneNumber } from "./PhoneNumberInputService.js";
import classes from "./PhoneNumberInput.module.css.js";
import { FieldSet, FieldLegend, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
import { Input } from "../Input/Input.js";
import { Select } from "../Select/Select.js";
const PhoneNumberInput = forwardRef(
  ({
    label,
    hideLabel,
    value,
    defaultValue,
    countryCode,
    subscriberNumber,
    optionalLabel,
    required,
    invalid,
    hasWarning,
    showValid,
    disabled,
    validationHint,
    readOnly,
    "aria-describedby": descriptionId,
    locale,
    className,
    style,
    ...props
  }, ref) => {
    const hiddenInputRef = useRef(null);
    const countryCodeRef = useRef(null);
    const subscriberNumberRef = useRef(null);
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    const options = useMemo(
      () => mapCountryCodeOptions(countryCode.options, locale),
      [countryCode.options, locale]
    );
    const handleChange = () => {
      var _a, _b;
      if (!countryCodeRef.current || !subscriberNumberRef.current) {
        return;
      }
      const selectedCountry = (_a = countryCodeRef == null ? void 0 : countryCodeRef.current) == null ? void 0 : _a.value;
      if (!selectedCountry) {
        return;
      }
      const code = (_b = countryCode.options.find(
        ({ country }) => country === selectedCountry
      )) == null ? void 0 : _b.code;
      if (!code) {
        return;
      }
      const phoneNumber = normalizePhoneNumber(
        code,
        subscriberNumberRef.current.value
      );
      changeInputValue(hiddenInputRef.current, phoneNumber);
    };
    const handlePaste = (event) => {
      if (!countryCodeRef.current || !subscriberNumberRef.current || countryCodeRef.current.disabled || countryCodeRef.current.readOnly) {
        return;
      }
      event.preventDefault();
      const pastedPhoneNumber = parsePhoneNumber(
        event.clipboardData.getData("text/plain"),
        countryCode.options
      );
      if (pastedPhoneNumber.countryCode) {
        changeInputValue(countryCodeRef.current, pastedPhoneNumber.countryCode);
      }
      if (pastedPhoneNumber.subscriberNumber) {
        changeInputValue(
          subscriberNumberRef.current,
          pastedPhoneNumber.subscriberNumber
        );
      }
    };
    const parsedValue = parsePhoneNumber(value, countryCode.options);
    const parsedDefaultValue = parsePhoneNumber(
      defaultValue,
      countryCode.options
    );
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
      if (!isSufficientlyLabelled(label)) {
        throw new AccessibilityError(
          "PhoneNumberInput",
          "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
        );
      }
      if (!isSufficientlyLabelled(countryCode.label)) {
        throw new AccessibilityError(
          "PhoneNumberInput",
          "The `countryCode.label` prop is missing or invalid."
        );
      }
      if (!isSufficientlyLabelled(subscriberNumber.label)) {
        throw new AccessibilityError(
          "PhoneNumberInput",
          "The `subscriberNumber.label` prop is missing or invalid."
        );
      }
    }
    return /* @__PURE__ */ jsxs(
      FieldSet,
      {
        "aria-describedby": descriptionIds,
        "aria-invalid": invalid && "true",
        "aria-required": required && "true",
        disabled,
        className,
        style,
        children: [
          /* @__PURE__ */ jsx(FieldLegend, { children: /* @__PURE__ */ jsx(
            FieldLabelText,
            {
              label,
              hideLabel,
              optionalLabel,
              required
            }
          ) }),
          /* @__PURE__ */ jsxs("div", { className: classes.wrapper, children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                ref: applyMultipleRefs(ref, hiddenInputRef),
                className: classes.hidden,
                required,
                disabled,
                readOnly,
                "aria-invalid": invalid,
                "aria-hidden": "true",
                tabIndex: -1,
                value,
                defaultValue,
                ...props
              }
            ),
            readOnly || countryCode.readonly ? /* @__PURE__ */ jsx(
              Input,
              {
                hideLabel: true,
                "aria-describedby": descriptionIds,
                autoComplete: "tel-country-code",
                required,
                disabled,
                className: classes["country-code"],
                inputClassName: classes["country-code-input"],
                ...countryCode,
                value: parsedValue.countryCode,
                defaultValue: parsedDefaultValue.countryCode ?? countryCode.defaultValue,
                invalid: invalid || countryCode.invalid,
                readOnly: true,
                onChange: () => {
                },
                ref: applyMultipleRefs(
                  countryCodeRef,
                  countryCode.ref
                ),
                renderPrefix: countryCode.renderPrefix
              }
            ) : /* @__PURE__ */ jsx(
              Select,
              {
                hideLabel: true,
                "aria-describedby": descriptionIds,
                autoComplete: "tel-country-code",
                required,
                disabled,
                className: classes["country-code"],
                ...countryCode,
                value: parsedValue.countryCode,
                defaultValue: parsedDefaultValue.countryCode ?? countryCode.defaultValue,
                invalid: invalid || countryCode.invalid,
                "aria-readonly": true,
                options,
                onChange: eachFn([
                  countryCode.onChange,
                  handleChange
                ]),
                ref: applyMultipleRefs(
                  countryCodeRef,
                  countryCode.ref
                ),
                renderPrefix: countryCode.renderPrefix
              }
            ),
            /* @__PURE__ */ jsx(
              Input,
              {
                hideLabel: true,
                "aria-describedby": descriptionIds,
                autoComplete: "tel-national",
                placeholder: subscriberNumber.placeholder,
                pattern: "^(?:[0-9]\\s?){0,14}[0-9]$",
                inputMode: "tel",
                required,
                disabled,
                className: classes["subscriber-number"],
                inputClassName: classes["subscriber-number-input"],
                hasWarning,
                showValid,
                ...subscriberNumber,
                value: parsedValue.subscriberNumber,
                defaultValue: parsedDefaultValue.subscriberNumber ?? subscriberNumber.defaultValue,
                invalid: invalid || subscriberNumber.invalid,
                readOnly: readOnly || subscriberNumber.readonly,
                onChange: eachFn([
                  subscriberNumber.onChange,
                  handleChange
                ]),
                onPaste: handlePaste,
                ref: applyMultipleRefs(subscriberNumberRef, subscriberNumber.ref)
              }
            )
          ] }),
          /* @__PURE__ */ jsx(
            FieldValidationHint,
            {
              id: validationHintId,
              disabled,
              invalid,
              hasWarning,
              showValid,
              validationHint
            }
          )
        ]
      }
    );
  }
);
PhoneNumberInput.displayName = "PhoneNumberInput";
export {
  PhoneNumberInput
};
