"use strict";
function parsePhoneNumber(value, options) {
  var _a, _b, _c;
  const sanitizedValue = (_c = (_b = (_a = value == null ? void 0 : value.replace(/[^+0-9\s]/g, " ")) == null ? void 0 : _a.replace(/\s+/g, " ")) == null ? void 0 : _b.trim()) == null ? void 0 : _c.replace(/^00/, "+");
  if (!sanitizedValue) {
    return {};
  }
  const hasCountryCode = sanitizedValue.startsWith("+");
  if (!hasCountryCode) {
    return {
      subscriberNumber: sanitizedValue
    };
  }
  const matchedOption = options.sort((a, b) => b.code.length - a.code.length).find(({ code }) => sanitizedValue.startsWith(code));
  if (!matchedOption) {
    return {
      subscriberNumber: sanitizedValue
    };
  }
  const subscriberNumber = sanitizedValue.split(matchedOption.code)[1].trim();
  if (!subscriberNumber) {
    return {
      countryCode: matchedOption.country
    };
  }
  return {
    countryCode: matchedOption.country,
    subscriberNumber
  };
}
function normalizePhoneNumber(countryCode, subscriberNumber) {
  const normalizedSubscriberNumber = subscriberNumber.replace(/[^0-9\s]/g, " ").replace(/\s+/g, " ").replace(/^0+/, "");
  return `${countryCode}${normalizedSubscriberNumber}`;
}
function mapCountryCodeOptions(countryCodeOptions, locale) {
  const getCountryName = (country) => {
    const isIntlDisplayNamesSupported = typeof Intl.DisplayNames === "function";
    if (!isIntlDisplayNamesSupported || !country) {
      return country;
    }
    const displayName = new Intl.DisplayNames(locale, { type: "region" });
    return displayName.of(country);
  };
  return countryCodeOptions.map(({ code, country }) => {
    const countryName = getCountryName(country);
    return {
      label: countryName ? `${countryName} (${code})` : code,
      value: country
    };
  }).sort((a, b) => a.label.localeCompare(b.label));
}
export {
  mapCountryCodeOptions,
  normalizePhoneNumber,
  parsePhoneNumber
};
