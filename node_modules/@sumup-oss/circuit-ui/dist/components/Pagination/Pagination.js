"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { ChevronLeft, ChevronRight } from "@sumup-oss/icons";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { generatePages } from "./PaginationService.js";
import classes from "./Pagination.module.css.js";
import { IconButton } from "../Button/IconButton.js";
import { PageList } from "./components/PageList/PageList.js";
import { PageSelect } from "./components/PageSelect/PageSelect.js";
const Pagination = ({
  currentPage = 1,
  totalPages,
  onChange,
  label,
  previousLabel,
  nextLabel,
  pageLabel = (page) => `Go to page ${page}`,
  totalLabel,
  className,
  ...props
}) => {
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
    if (!isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Pagination",
        "The `label` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(previousLabel)) {
      throw new AccessibilityError(
        "Pagination",
        "The `previousLabel` prop is missing or invalid."
      );
    }
    if (!isSufficientlyLabelled(nextLabel)) {
      throw new AccessibilityError(
        "Pagination",
        "The `nextLabel` prop is missing or invalid."
      );
    }
  }
  if (!totalPages || totalPages < 2) {
    return null;
  }
  const showList = totalPages <= 5;
  const pages = generatePages(totalPages);
  return /* @__PURE__ */ jsxs(
    "nav",
    {
      role: "navigation",
      "aria-label": label,
      className: clsx(classes.base, className),
      ...props,
      children: [
        /* @__PURE__ */ jsx(
          IconButton,
          {
            size: "s",
            variant: "secondary",
            disabled: currentPage <= 1,
            onClick: () => onChange(currentPage - 1),
            className: classes.prev,
            icon: ChevronLeft,
            children: previousLabel
          }
        ),
        showList ? /* @__PURE__ */ jsx(
          PageList,
          {
            onChange,
            pageLabel,
            pages,
            currentPage
          }
        ) : /* @__PURE__ */ jsx(
          PageSelect,
          {
            label,
            onChange,
            pages,
            currentPage,
            totalPages,
            totalLabel
          }
        ),
        /* @__PURE__ */ jsx(
          IconButton,
          {
            size: "s",
            variant: "secondary",
            disabled: currentPage >= totalPages,
            onClick: () => onChange(currentPage + 1),
            className: classes.next,
            icon: ChevronRight,
            children: nextLabel
          }
        )
      ]
    }
  );
};
export {
  Pagination
};
