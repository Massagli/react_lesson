"use strict";
import { eachFn } from "../../util/helpers.js";
function calculateNextStep(data = {}) {
  const { step, stepInterval = 1, firstStep = 0, totalSteps, cycle } = data;
  const nextStep = (step || firstStep) + stepInterval;
  if (totalSteps) {
    const lastStep = totalSteps - 1;
    const isOutOfRange = nextStep > lastStep;
    if (cycle && isOutOfRange) {
      return firstStep;
    }
    if (isOutOfRange) {
      return lastStep;
    }
  }
  return nextStep;
}
function calculatePreviousStep(data = {}) {
  const { step, stepInterval = 1, firstStep = 0, totalSteps, cycle } = data;
  const previousStep = (step || firstStep) - stepInterval;
  const isOutOfRange = previousStep < firstStep;
  if (totalSteps && cycle && isOutOfRange) {
    const lastStep = totalSteps - 1;
    return lastStep;
  }
  if (isOutOfRange) {
    return firstStep;
  }
  return previousStep;
}
function reducer(state, action) {
  const { type, payload } = action;
  switch (type) {
    default:
      return { ...state, ...payload };
  }
}
function generatePropGetters(actions) {
  return {
    // @ts-expect-error The type will be inferred correctly as long as the
    // generic type isn't manually overridden.
    getPlayControlProps: (props = {}) => ({
      "aria-label": "play",
      ...props,
      "onClick": eachFn([props.onClick, actions.play])
    }),
    // @ts-expect-error The type will be inferred correctly as long as the
    // generic type isn't manually overridden.
    getPauseControlProps: (props = {}) => ({
      "aria-label": "pause",
      ...props,
      "onClick": eachFn([props.onClick, actions.pause])
    }),
    // @ts-expect-error The type will be inferred correctly as long as the
    // generic type isn't manually overridden.
    getNextControlProps: (props = {}) => ({
      "aria-label": "next",
      ...props,
      "onClick": eachFn([props.onClick, actions.next])
    }),
    // @ts-expect-error The type will be inferred correctly as long as the
    // generic type isn't manually overridden.
    getPreviousControlProps: (props = {}) => ({
      "aria-label": "previous",
      ...props,
      "onClick": eachFn([props.onClick, actions.previous])
    })
  };
}
export {
  calculateNextStep,
  calculatePreviousStep,
  generatePropGetters,
  reducer
};
