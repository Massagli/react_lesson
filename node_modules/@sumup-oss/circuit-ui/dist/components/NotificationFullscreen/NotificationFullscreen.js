"use strict";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { isString } from "../../util/type-check.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./NotificationFullscreen.module.css.js";
import { Headline } from "../Headline/Headline.js";
import { Body } from "../Body/Body.js";
import { ButtonGroup } from "../ButtonGroup/ButtonGroup.js";
import { Image } from "../Image/Image.js";
function NotificationImage(image) {
  if ("svg" in image) {
    const Svg = image.svg;
    const isDecorative = !image.alt;
    return /* @__PURE__ */ jsx("div", { className: classes.image, children: /* @__PURE__ */ jsx(
      Svg,
      {
        ...isDecorative ? { "aria-hidden": true } : { "aria-label": image.alt, "role": "img" }
      }
    ) });
  }
  return /* @__PURE__ */ jsx(Image, { ...image, className: classes.image });
}
const NotificationFullscreen = forwardRef(({ image, headline, body, actions, className, ...props }, ref) => {
  const headlineLabel = isString(headline) ? headline : headline.label;
  const headlineElement = isString(headline) ? "h2" : headline.as;
  return /* @__PURE__ */ jsxs("div", { ref, className: clsx(classes.base, className), ...props, children: [
    /* @__PURE__ */ jsx(NotificationImage, { ...image }),
    /* @__PURE__ */ jsx(Headline, { className: classes.headline, size: "m", as: headlineElement, children: headlineLabel }),
    body && /* @__PURE__ */ jsx(Body, { className: classes.body, children: body }),
    actions && /* @__PURE__ */ jsx(ButtonGroup, { actions, className: classes.buttons })
  ] });
});
export {
  NotificationFullscreen
};
