"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { resolveCurrencyFormat } from "@sumup-oss/intl";
import { NumericFormat } from "react-number-format";
import { clsx } from "../../styles/clsx.js";
import { useLocale } from "../../hooks/useLocale/useLocale.js";
import { formatPlaceholder } from "./CurrencyInputService.js";
import classes from "./CurrencyInput.module.css.js";
import { Input } from "../Input/Input.js";
const DEFAULT_FORMAT = {
  currencyPosition: "left",
  currencySymbol: "$",
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
  decimalDelimiter: ".",
  groupDelimiter: ","
};
const DUMMY_DELIMITER = "?";
const CurrencyInput = forwardRef(
  ({
    locale: customLocale,
    currency,
    placeholder,
    "aria-describedby": descriptionId,
    ...props
  }, ref) => {
    const locale = useLocale(customLocale);
    const currencySymbolId = useId();
    const descriptionIds = clsx(currencySymbolId, descriptionId);
    const currencyFormat = resolveCurrencyFormat(locale, currency) || DEFAULT_FORMAT;
    const {
      currencyPosition,
      currencySymbol,
      minimumFractionDigits,
      maximumFractionDigits,
      decimalDelimiter,
      groupDelimiter
    } = currencyFormat;
    const placeholderString = formatPlaceholder(placeholder, locale, {
      minimumFractionDigits,
      maximumFractionDigits
    });
    const allowedDecimalSeparators = [
      ".",
      ",",
      ...decimalDelimiter ? [decimalDelimiter] : []
    ];
    const renderPrefix = currencyPosition === "prefix" ? (prefixProps) => /* @__PURE__ */ jsx(
      "span",
      {
        ...prefixProps,
        className: clsx(prefixProps.className, classes.currency),
        id: currencySymbolId,
        children: currencySymbol
      }
    ) : void 0;
    const renderSuffix = currencyPosition === "suffix" ? (suffixProps) => /* @__PURE__ */ jsx(
      "span",
      {
        ...suffixProps,
        className: clsx(suffixProps.className, classes.currency),
        id: currencySymbolId,
        children: currencySymbol
      }
    ) : void 0;
    return /* @__PURE__ */ jsx(
      NumericFormat,
      {
        thousandSeparator: groupDelimiter,
        decimalSeparator: maximumFractionDigits && maximumFractionDigits > 0 ? decimalDelimiter : DUMMY_DELIMITER,
        decimalScale: maximumFractionDigits,
        customInput: Input,
        getInputRef: ref,
        allowedDecimalSeparators,
        renderPrefix,
        renderSuffix,
        placeholder: placeholderString,
        textAlign: "right",
        type: "text",
        inputMode: "decimal",
        "aria-describedby": descriptionIds,
        ...props
      }
    );
  }
);
CurrencyInput.displayName = "CurrencyInput";
export {
  CurrencyInput
};
