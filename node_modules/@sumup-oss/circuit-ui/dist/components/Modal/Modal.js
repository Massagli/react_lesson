"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import ReactModal from "react-modal";
import { isFunction } from "../../util/type-check.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./Modal.module.css.js";
import { createUseModal } from "../ModalContext/createUseModal.js";
import { StackContext } from "../StackContext/StackContext.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const TRANSITION_DURATION = 300;
const Modal = ({
  children,
  onClose,
  variant = "contextual",
  preventClose = false,
  closeButtonLabel,
  className,
  style,
  ...props
}) => {
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !preventClose && !isSufficientlyLabelled(closeButtonLabel)) {
    throw new AccessibilityError(
      "Modal",
      "The `closeButtonLabel` prop is missing or invalid. Pass it in `setModal`, or pass `preventClose` if you intend to hide the Modal's close button."
    );
  }
  const reactModalProps = {
    className: {
      base: clsx(classes.base, classes[variant]),
      afterOpen: classes.open,
      beforeClose: classes.closed
    },
    overlayClassName: {
      base: classes.overlay,
      afterOpen: classes["overlay-open"],
      beforeClose: classes["overlay-closed"]
    },
    onRequestClose: onClose,
    closeTimeoutMS: TRANSITION_DURATION,
    shouldCloseOnOverlayClick: !preventClose,
    shouldCloseOnEsc: !preventClose,
    /**
     * react-modal relies on document.activeElement to return focus after the modal is closed.
     * Safari and Firefox don't set it properly on button click (see https://github.com/reactjs/react-modal/issues/858 and https://github.com/reactjs/react-modal/issues/389).
     * Returning the focus to document.body or to the focus-root can cause unwanted page scroll.
     * Preventing scroll on focus would provide better UX for mouse users and shouldn't cause any side effects for assistive technology users.
     */
    preventScroll: true,
    ...props
  };
  return /* @__PURE__ */ jsx(StackContext.Provider, { value: "var(--cui-z-index-modal)", children: /* @__PURE__ */ jsx(ReactModal, { ...reactModalProps, children: /* @__PURE__ */ jsxs("div", { className: clsx(classes.content, className), style, children: [
    !preventClose && closeButtonLabel && /* @__PURE__ */ jsx(CloseButton, { onClick: onClose, className: classes.close, children: closeButtonLabel }),
    isFunction(children) ? children({ onClose }) : children
  ] }) }) });
};
Modal.TRANSITION_DURATION = TRANSITION_DURATION;
const useModal = createUseModal(Modal);
export {
  Modal,
  useModal
};
