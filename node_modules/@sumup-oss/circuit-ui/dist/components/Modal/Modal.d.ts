/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { HTMLAttributes, ReactNode } from 'react';
import { type ModalComponent, type BaseModalProps } from '../ModalContext/index.js';
type PreventCloseProps = {
    /**
     * Text label for the close button for screen readers.
     * Important for accessibility.
     */
    closeButtonLabel?: never;
    /**
     * Prevent users from closing the modal by clicking/tapping the overlay or
     * pressing the escape key. Default `false`.
     */
    preventClose: boolean;
} | {
    closeButtonLabel: string;
    preventClose?: never;
};
export type ModalProps = BaseModalProps & PreventCloseProps & {
    /**
     * The modal content. Use a render function when you need access to the
     * `onClose` function.
     */
    children: ReactNode | (({ onClose }: Pick<BaseModalProps, 'onClose'>) => ReactNode);
    /**
     * Use the `contextual` variant when the modal content requires the context
     * of the page underneath to be understood, otherwise, use the `immersive`
     * variant to focus the user's attention.
     */
    variant: 'contextual' | 'immersive';
    /**
     * Custom styles for the modal wrapper element.
     */
    className?: HTMLAttributes<HTMLDivElement>['className'];
    /**
     * Custom styles for the modal wrapper element.
     */
    style?: HTMLAttributes<HTMLDivElement>['style'];
};
/**
 * The modal component displays self-contained tasks in a focused window that
 * overlays the page content.
 * Built on top of [`react-modal`](https://reactcommunity.org/react-modal/).
 */
export declare const Modal: ModalComponent<ModalProps>;
export declare const useModal: () => {
    setModal: (props: Omit<ModalProps, "isOpen">) => void;
    removeModal: () => void;
};
export {};
