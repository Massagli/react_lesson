"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useState } from "react";
import { AccessibilityError } from "../../util/errors.js";
import { isString } from "../../util/type-check.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./ListItemGroup.module.css.js";
import { Body } from "../Body/Body.js";
import { ListItem } from "../ListItem/ListItem.js";
const ListItemGroup = forwardRef(
  ({
    variant = "inset",
    items,
    label,
    hideLabel,
    details,
    className,
    ...props
  }, ref) => {
    const [focusedItemKey, setFocusedItemKey] = useState(null);
    const isPlain = variant === "plain";
    const isInteractive = items.some((item) => !!item.href || !!item.onClick);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !label) {
      throw new AccessibilityError(
        "ListItemGroup",
        "The `label` prop is missing. This is an accessibility requirement. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx(classes.base, isPlain && classes.plain, className),
        ...props,
        ref,
        children: [
          /* @__PURE__ */ jsxs("div", { className: classes.header, children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: clsx(
                  classes.label,
                  hideLabel && utilClasses.hideVisually
                ),
                children: isString(label) ? /* @__PURE__ */ jsx(Body, { as: "h4", size: "s", children: label }) : label
              }
            ),
            details && /* @__PURE__ */ jsx("div", { className: classes.details, children: isString(details) ? /* @__PURE__ */ jsx(Body, { size: "s", children: details }) : details })
          ] }),
          /* @__PURE__ */ jsx("ul", { className: classes.items, children: items.map(({ key, ...item }) => /* @__PURE__ */ jsx(
            "li",
            {
              className: clsx(
                classes.item,
                isInteractive && classes.interactive,
                focusedItemKey === key && classes.focused,
                item.selected && classes.selected
              ),
              children: /* @__PURE__ */ jsx(
                ListItem,
                {
                  ...item,
                  className: classes.child,
                  onFocus: (event) => {
                    try {
                      if (event.currentTarget.matches(":focus-visible")) {
                        setFocusedItemKey(key);
                      }
                    } catch (_error) {
                      setFocusedItemKey(key);
                    }
                  },
                  onBlur: () => setFocusedItemKey(null)
                }
              )
            },
            key
          )) })
        ]
      }
    );
  }
);
ListItemGroup.displayName = "ListItemGroup";
export {
  ListItemGroup
};
