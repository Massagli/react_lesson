"use strict";
import { useCallback, useEffect } from "react";
import { useComponentSize } from "../../hooks/useComponentSize/useComponentSize.js";
const useAutoExpand = (ref, { minRows, rows = minRows, onInput, ...props }) => {
  const autoExpand = rows === "auto";
  const { height, width } = useComponentSize(ref);
  const updateElementHeight = useCallback(
    (el) => {
      const previousValue = el.value !== void 0 ? el.value : "";
      const shouldUsePlaceholder = !previousValue.length && !!props.placeholder;
      if (shouldUsePlaceholder) {
        el.value = props.placeholder !== void 0 ? props.placeholder : "";
      }
      el.style.height = "auto";
      if (el.scrollHeight) {
        el.style.height = `${el.scrollHeight}px`;
      }
      if (shouldUsePlaceholder) {
        el.value = previousValue;
      }
    },
    [props.placeholder]
  );
  const inputHandler = useCallback(
    (e) => {
      if (onInput) {
        onInput(e);
      }
      if (!e.defaultPrevented) {
        updateElementHeight(e.currentTarget);
      }
    },
    [onInput, updateElementHeight]
  );
  useEffect(() => {
    const el = ref.current;
    if (el && autoExpand) {
      el.style.resize = "none";
      el.style.overflowY = "hidden";
      updateElementHeight(el);
    }
  }, [autoExpand, ref, updateElementHeight, minRows, height, width]);
  return {
    ...props,
    onInput: autoExpand ? inputHandler : onInput,
    rows: autoExpand ? minRows : rows
  };
};
export {
  useAutoExpand
};
