"use strict";
"use client";
import { useId, useRef, useContext, useCallback, useEffect } from "react";
import { uniqueId } from "../../util/id.js";
import { SidePanelContext } from "./SidePanelContext.js";
const useSidePanel = () => {
  const defaultGroup = useId();
  const bottomSidePanelGroupRef = useRef();
  const {
    setSidePanel: setSidePanelContext,
    updateSidePanel: updateSidePanelContext,
    removeSidePanel: removeSidePanelContext,
    isPrimaryContentResized,
    transitionDuration
  } = useContext(SidePanelContext);
  const setSidePanel = useCallback(
    (props) => {
      const sidePanelGroup = props.group || defaultGroup;
      if (!bottomSidePanelGroupRef.current) {
        bottomSidePanelGroupRef.current = sidePanelGroup;
      }
      setSidePanelContext({ ...props, group: sidePanelGroup, id: uniqueId() });
    },
    [setSidePanelContext, defaultGroup]
  );
  const updateSidePanel = useCallback(
    (props) => {
      const sidePanelGroup = props.group || defaultGroup;
      updateSidePanelContext({ ...props, group: sidePanelGroup });
    },
    [updateSidePanelContext, defaultGroup]
  );
  const removeSidePanel = useCallback(
    (group) => {
      const sidePanelGroup = group || defaultGroup;
      removeSidePanelContext(sidePanelGroup).catch(() => {
      });
      if (bottomSidePanelGroupRef.current === sidePanelGroup) {
        bottomSidePanelGroupRef.current = void 0;
      }
    },
    [removeSidePanelContext, defaultGroup]
  );
  const removeSidePanelRef = useRef(removeSidePanel);
  removeSidePanelRef.current = removeSidePanel;
  useEffect(
    () => () => {
      if (bottomSidePanelGroupRef.current) {
        removeSidePanelRef.current(bottomSidePanelGroupRef.current);
      }
    },
    []
  );
  return {
    setSidePanel,
    updateSidePanel,
    removeSidePanel,
    isPrimaryContentResized,
    transitionDuration
  };
};
export {
  useSidePanel
};
