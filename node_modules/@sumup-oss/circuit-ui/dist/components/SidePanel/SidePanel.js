"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { useState, useId, useEffect } from "react";
import { isFunction } from "../../util/type-check.js";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import classes from "./SidePanel.module.css.js";
import { Header } from "./components/Header/Header.js";
import { MobileSidePanel } from "./components/MobileSidePanel/MobileSidePanel.js";
import { DesktopSidePanel } from "./components/DesktopSidePanel/DesktopSidePanel.js";
const SidePanel = ({
  backButtonLabel,
  children,
  closeButtonLabel,
  headline,
  isBottomPanelClosing,
  isInstantOpen,
  isMobile,
  isStacked,
  onBack,
  onClose,
  ...props
}) => {
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
    if (!isSufficientlyLabelled(closeButtonLabel)) {
      throw new AccessibilityError(
        "SidePanel",
        "The `closeButtonLabel` prop is missing or invalid."
      );
    }
    if (onBack && !isSufficientlyLabelled(backButtonLabel)) {
      throw new AccessibilityError(
        "SidePanel",
        "The `backButtonLabel` prop is missing or invalid."
      );
    }
  }
  const [isHeaderSticky, setHeaderSticky] = useState(false);
  const headerAriaId = useId();
  useEffect(() => {
    setHeaderSticky(false);
  }, [isMobile]);
  const handleScroll = (event) => {
    setHeaderSticky(event.currentTarget.scrollTop > 0);
  };
  const defaultProps = {
    aria: {
      labelledby: headerAriaId
    },
    onRequestClose: onBack || onClose,
    bodyOpenClassName: "",
    /**
     * react-modal relies on document.activeElement to return focus after the modal is closed.
     * Safari and Firefox don't set it properly on button click (see https://github.com/reactjs/react-modal/issues/858 and https://github.com/reactjs/react-modal/issues/389).
     * Returning the focus to document.body or to the focus-root can cause unwanted page scroll.
     * Preventing scroll on focus would provide better UX for mouse users and shouldn't cause any side effects for assistive technology users.
     */
    preventScroll: true
  };
  const content = /* @__PURE__ */ jsxs("div", { className: classes.base, onScroll: handleScroll, children: [
    /* @__PURE__ */ jsx(
      Header,
      {
        backButtonLabel,
        closeButtonLabel,
        headline,
        id: headerAriaId,
        onBack,
        onClose,
        isSticky: isHeaderSticky
      }
    ),
    /* @__PURE__ */ jsx("div", { className: classes.content, children: isFunction(children) ? children({ onBack, onClose }) : children })
  ] });
  if (isMobile) {
    return /* @__PURE__ */ jsx(
      MobileSidePanel,
      {
        ...defaultProps,
        ...props,
        isBottomPanelClosing,
        isStacked,
        children: content
      }
    );
  }
  return /* @__PURE__ */ jsx(
    DesktopSidePanel,
    {
      ...defaultProps,
      ...props,
      isInstantOpen,
      children: content
    }
  );
};
export {
  SidePanel
};
