/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { type HTMLAttributes, type ButtonHTMLAttributes, type AnchorHTMLAttributes } from 'react';
import type { IconComponentType } from '@sumup-oss/icons';
import type { ClickEvent } from '../../types/events.js';
type BaseProps = {
    /**
     * Render prop that should render a leading-aligned icon or element.
     */
    prefix?: IconComponentType;
    /**
     * Render prop that should render a trailing-aligned icon or element.
     */
    suffix?: IconComponentType;
    /**
     * Triggers selected styles on the tag.
     */
    selected?: boolean;
    /**
     * Function that's called when the button is clicked.
     */
    onClick?: (event: ClickEvent) => void;
};
type RemoveProps = {
    /**
     * Renders a close button inside the tag and calls the provided function
     * when the button is clicked.
     */
    onRemove: (event: ClickEvent) => void;
    /**
     * Text label for the remove icon for screen readers.
     * Important for accessibility.
     */
    removeButtonLabel: string;
} | {
    onRemove?: never;
    removeButtonLabel?: never;
};
type DivElProps = Omit<HTMLAttributes<HTMLDivElement>, 'onClick' | 'prefix'>;
type LinkElProps = Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick' | 'prefix'>;
type ButtonElProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'prefix'>;
export type TagProps = BaseProps & RemoveProps & DivElProps & LinkElProps & ButtonElProps;
export declare const Tag: import("react").ForwardRefExoticComponent<TagProps & import("react").RefAttributes<HTMLDivElement & HTMLButtonElement>>;
export {};
