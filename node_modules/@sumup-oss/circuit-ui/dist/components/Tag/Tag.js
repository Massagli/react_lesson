"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./Tag.module.css.js";
import { useComponents } from "../ComponentsContext/useComponents.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const Tag = forwardRef(
  ({
    children,
    prefix: Prefix,
    suffix: Suffix,
    onRemove,
    removeButtonLabel,
    selected,
    onClick,
    className,
    style,
    ...props
  }, ref) => {
    const { Link } = useComponents();
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && onRemove && !isSufficientlyLabelled(removeButtonLabel)) {
      throw new AccessibilityError(
        "Tag",
        "The `removeButtonLabel` prop is missing or invalid. Omit the `onRemove` prop if you intend to disable the tag removing functionality."
      );
    }
    let Element = "div";
    if (props.href) {
      Element = Link;
    } else if (onClick) {
      Element = "button";
    }
    const isRemovable = onRemove && removeButtonLabel;
    const isButton = onClick && !props.href;
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: clsx(
          classes.base,
          isRemovable && classes.removable,
          selected && classes.selected,
          className
        ),
        style,
        children: [
          /* @__PURE__ */ jsxs(
            Element,
            {
              className: clsx(classes.content, onClick && utilClasses.focusVisible),
              type: isButton ? "button" : void 0,
              "aria-pressed": isButton && selected ? "true" : void 0,
              onClick,
              ref,
              ...props,
              children: [
                Prefix && /* @__PURE__ */ jsx(Prefix, { className: classes.prefix, "aria-hidden": "true" }),
                children,
                Suffix && /* @__PURE__ */ jsx(Suffix, { className: classes.suffix, "aria-hidden": "true" })
              ]
            }
          ),
          isRemovable && /* @__PURE__ */ jsx(
            CloseButton,
            {
              type: "button",
              variant: selected ? "primary" : "secondary",
              className: classes["remove-button"],
              size: "s",
              onClick: onRemove,
              children: removeButtonLabel
            }
          )
        ]
      }
    );
  }
);
Tag.displayName = "Tag";
export {
  Tag
};
