"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useState, useCallback, useEffect, useMemo, createElement } from "react";
import { Plus } from "@sumup-oss/icons";
import { utilClasses } from "../../../../styles/utility.js";
import { TableHeader } from "../TableHeader/TableHeader.js";
import { getFirstNRows, generateFromIndex } from "../../utils.js";
import { applyMultipleRefs } from "../../../../util/refs.js";
import { throttle } from "../../../../util/helpers.js";
import { clsx } from "../../../../styles/clsx.js";
import { RowHeader } from "../RowHeader/RowHeader.js";
import { TableCell } from "../TableCell/TableCell.js";
import classes from "./PlanTable.module.css.js";
import { useMedia } from "../../../../hooks/useMedia/useMedia.js";
import { Body } from "../../../Body/Body.js";
import { Button } from "../../../Button/Button.js";
const COLLAPSE_THRESHOLD = 8;
const PlanTable = forwardRef(
  ({ caption, showAllFeaturesLabel, headers, sections, activePlans, ...props }, ref) => {
    const tableRef = useRef(null);
    const theadRef = useRef(null);
    const isMobile = useMedia("(max-width: 767px)", true);
    const isTablet = useMedia(
      "(max-width: 767px) and (min-width: 480px)",
      true
    );
    const [isCollapsed, setIsCollapsed] = useState(
      sections.reduce(
        // the table is collapsed if the total number of rows is greater than the threshold, section titles included.
        (totalRows, section) => totalRows + section.features.length + 1,
        0
      ) > COLLAPSE_THRESHOLD
    );
    const [headerHeight, setHeaderHeight] = useState(0);
    const updateHeaderHeight = useCallback(() => {
      throttle(() => {
        var _a;
        setHeaderHeight(((_a = theadRef.current) == null ? void 0 : _a.getBoundingClientRect().height) ?? 0);
      }, 500)();
    }, []);
    useEffect(() => {
      updateHeaderHeight();
    }, [updateHeaderHeight]);
    useEffect(() => {
      window.addEventListener("resize", updateHeaderHeight);
      return () => {
        window.removeEventListener("resize", updateHeaderHeight);
      };
    }, [updateHeaderHeight]);
    const showFeatures = useCallback(() => {
      setIsCollapsed(false);
    }, []);
    useEffect(() => {
      var _a, _b;
      if (!isCollapsed) {
        (_b = (_a = tableRef.current) == null ? void 0 : _a.querySelectorAll("tr")[COLLAPSE_THRESHOLD + 1]) == null ? void 0 : _b.focus({ preventScroll: true });
      }
    }, [isCollapsed]);
    const sectionsToDisplay = useMemo(
      () => isCollapsed ? getFirstNRows(sections, COLLAPSE_THRESHOLD) : sections,
      [sections, isCollapsed]
    );
    const headersToDisplay = useMemo(
      () => isMobile ? generateFromIndex(headers, activePlans) : headers,
      [headers, activePlans, isMobile]
    );
    return /* @__PURE__ */ jsxs("div", { className: classes.base, children: [
      /* @__PURE__ */ jsxs(
        "table",
        {
          className: classes.table,
          ref: applyMultipleRefs(ref, tableRef),
          ...props,
          children: [
            /* @__PURE__ */ jsx("caption", { id: "caption", className: utilClasses.hideVisually, children: caption }),
            /* @__PURE__ */ jsxs("colgroup", { children: [
              /* @__PURE__ */ jsx("col", {}),
              (isMobile ? activePlans : headers).map((_, index) => /* @__PURE__ */ jsx("col", {}, `cui-ct-col-${index}`))
            ] }),
            /* @__PURE__ */ jsx("thead", { ref: theadRef, children: /* @__PURE__ */ jsxs("tr", { children: [
              /* @__PURE__ */ jsx("td", {}),
              headersToDisplay.map((plan, index) => /* @__PURE__ */ createElement(
                TableHeader,
                {
                  ...plan,
                  key: `cui-ct-headers-${plan.id}`,
                  id: `cui-ct-headers-${plan.id}`,
                  className: clsx(index > 0 && classes.border)
                }
              ))
            ] }) }),
            sectionsToDisplay.map((row, sectionIndex) => /* @__PURE__ */ jsxs(
              "tbody",
              {
                style: { position: "relative" },
                children: [
                  /* @__PURE__ */ jsx("tr", { tabIndex: -1, children: /* @__PURE__ */ jsx(
                    "th",
                    {
                      className: classes.section,
                      scope: "rowgroup",
                      id: `cui-ct-sections-${sectionIndex}`,
                      colSpan: headers.length + 1,
                      style: {
                        top: `${(isMobile ? 80 : 0) + (isTablet ? 16 : 0) + headerHeight}px`
                      },
                      children: /* @__PURE__ */ jsx(Body, { className: classes.title, size: "m", weight: "semibold", children: row.title })
                    }
                  ) }),
                  row.features.map((feature) => {
                    const featureId = feature.featureDescription.label.replace(
                      /\s+/g,
                      ""
                    );
                    return /* @__PURE__ */ jsxs("tr", { tabIndex: -1, children: [
                      /* @__PURE__ */ jsx(
                        RowHeader,
                        {
                          description: feature.featureDescription.description,
                          toggletip: feature.featureDescription.toggletip,
                          headers: `cui-ct-sections-${sectionIndex}`,
                          id: featureId,
                          children: feature.featureDescription.label
                        }
                      ),
                      (isMobile ? generateFromIndex(feature.values, activePlans) : feature.values).map((value, index) => {
                        var _a;
                        return /* @__PURE__ */ jsx(
                          TableCell,
                          {
                            headers: `cui-ct-sections-${sectionIndex} ${featureId} cui-ct-headers-${(_a = headersToDisplay[index]) == null ? void 0 : _a.id}`,
                            cellValue: value
                          },
                          `cui-comparison-table-${feature.featureDescription.label}-cell-${index}`
                        );
                      })
                    ] }, featureId);
                  })
                ]
              },
              `cui-ct-tbody-${sectionIndex}`
            ))
          ]
        }
      ),
      isCollapsed && /* @__PURE__ */ jsx("div", { className: classes.expand, children: /* @__PURE__ */ jsx(Button, { onClick: showFeatures, icon: Plus, variant: "tertiary", children: showAllFeaturesLabel }) })
    ] });
  }
);
export {
  PlanTable
};
