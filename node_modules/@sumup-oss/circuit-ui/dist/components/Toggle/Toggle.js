"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import { deprecate } from "../../util/logger.js";
import classes from "./Toggle.module.css.js";
import { FieldWrapper, FieldDescription } from "../Field/Field.js";
const Toggle = forwardRef(
  ({
    label,
    description,
    "aria-describedby": describedBy,
    checkedLabel,
    uncheckedLabel,
    checked = false,
    onChange,
    className,
    style,
    ...props
  }, ref) => {
    const switchId = useId();
    const labelId = useId();
    const descriptionId = useId();
    const descriptionIds = [describedBy, description && descriptionId].filter(Boolean).join(" ");
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Toggle",
        "The `label` prop is missing or invalid."
      );
    }
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
      if (checkedLabel) {
        deprecate(
          "Toggle",
          "The `checkedLabel` prop is deprecated and can be removed."
        );
      }
      if (uncheckedLabel) {
        deprecate(
          "Toggle",
          "The `uncheckedLabel` prop is deprecated and can be removed."
        );
      }
    }
    return /* @__PURE__ */ jsxs(
      FieldWrapper,
      {
        disabled: props.disabled,
        className: clsx(classes.wrapper, className),
        style,
        children: [
          /* @__PURE__ */ jsx(
            "button",
            {
              type: "button",
              onClick: onChange,
              role: "switch",
              "aria-checked": checked,
              "aria-labelledby": labelId,
              "aria-describedby": descriptionIds,
              id: switchId,
              className: clsx(classes.track, utilClasses.focusVisible),
              ...props,
              ref,
              children: /* @__PURE__ */ jsx("span", { className: classes.knob })
            }
          ),
          /* @__PURE__ */ jsxs("label", { className: classes.label, id: labelId, htmlFor: switchId, children: [
            label,
            description && /* @__PURE__ */ jsx(FieldDescription, { "aria-hidden": "true", children: description })
          ] }),
          description && /* @__PURE__ */ jsx("span", { id: descriptionId, className: utilClasses.hideVisually, children: description })
        ]
      }
    );
  }
);
Toggle.displayName = "Toggle";
export {
  Toggle
};
