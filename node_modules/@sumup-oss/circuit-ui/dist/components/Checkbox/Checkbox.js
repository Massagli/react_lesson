"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { CheckboxInput } from "./CheckboxInput.js";
import classes from "./Checkbox.module.css.js";
import { FieldWrapper, FieldValidationHint } from "../Field/Field.js";
const Checkbox = forwardRef(
  ({
    label,
    disabled,
    validationHint,
    optionalLabel,
    className,
    style,
    invalid,
    indeterminate = false,
    "aria-describedby": descriptionId,
    children,
    ...props
  }, ref) => {
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Checkbox",
        "The `label` prop is missing or invalid."
      );
    }
    return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(
        CheckboxInput,
        {
          ...props,
          ref,
          "aria-describedby": descriptionIds,
          invalid,
          disabled,
          indeterminate,
          align: "start",
          children: /* @__PURE__ */ jsxs("span", { className: classes["label-text"], children: [
            label || children,
            optionalLabel ? /* @__PURE__ */ jsx("span", { className: classes.optional, children: ` (${optionalLabel})` }) : null
          ] })
        }
      ),
      /* @__PURE__ */ jsx(
        FieldValidationHint,
        {
          id: validationHintId,
          disabled,
          invalid,
          validationHint
        }
      )
    ] });
  }
);
Checkbox.displayName = "Checkbox";
export {
  Checkbox
};
