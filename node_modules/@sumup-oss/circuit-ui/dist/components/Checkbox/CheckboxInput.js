"use strict";
"use client";
import { jsxs, Fragment, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useEffect, useId } from "react";
import { Checkmark } from "@sumup-oss/icons";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { IndeterminateIcon } from "./IndeterminateIcon.js";
import classes from "./CheckboxInput.module.css.js";
const CheckboxInput = forwardRef(
  ({
    id: customId,
    invalid,
    indeterminate = false,
    children,
    className,
    style,
    align = "center",
    ...props
  }, ref) => {
    const inputRef = useRef(null);
    useEffect(() => {
      if (inputRef.current) {
        inputRef.current.indeterminate = indeterminate;
      }
    }, [props.checked, indeterminate]);
    const id = useId();
    const inputId = customId || id;
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(children, props)) {
      throw new AccessibilityError(
        "CheckboxInput",
        "The input is missing a valid label."
      );
    }
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx(
        "input",
        {
          ...props,
          ref: applyMultipleRefs(ref, inputRef),
          id: inputId,
          type: "checkbox",
          "aria-checked": indeterminate ? "mixed" : void 0,
          className: clsx(
            classes.base,
            invalid && classes.invalid,
            utilClasses.hideVisually
          )
        }
      ),
      /* @__PURE__ */ jsxs(
        "label",
        {
          htmlFor: inputId,
          className: clsx(className, classes.label, classes[align]),
          style,
          children: [
            children,
            /* @__PURE__ */ jsx(Checkmark, { size: "16", "aria-hidden": "true", "data-symbol": "checked" }),
            /* @__PURE__ */ jsx(IndeterminateIcon, { "aria-hidden": "true", "data-symbol": "indeterminate" })
          ]
        }
      )
    ] });
  }
);
CheckboxInput.displayName = "CheckboxInput";
export {
  CheckboxInput
};
