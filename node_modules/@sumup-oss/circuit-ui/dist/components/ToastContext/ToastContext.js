"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { createContext, useCallback, useMemo, useEffect, createElement } from "react";
import { clsx } from "../../styles/clsx.js";
import classes from "./ToastContext.module.css.js";
import { useStack } from "../../hooks/useStack/useStack.js";
const DEFAULT_TOAST_DURATION = 6e3;
const ToastContext = createContext({
  setToast: () => {
  },
  removeToast: () => {
  }
});
function ToastProvider({
  children,
  position = "bottom",
  className
}) {
  const [toasts, dispatch] = useStack([]);
  const setToast = useCallback(
    (toast) => {
      dispatch({
        type: "push",
        item: toast
      });
    },
    [dispatch]
  );
  const removeToast = useCallback(
    (toast) => {
      if (toast.onClose) {
        toast.onClose();
      }
      dispatch({
        type: "remove",
        id: toast.id,
        transition: {
          duration: toast.component.TRANSITION_DURATION
        }
      });
    },
    [dispatch]
  );
  const context = useMemo(
    () => ({ setToast, removeToast }),
    [setToast, removeToast]
  );
  useEffect(() => {
    const toastToDismiss = toasts[0];
    if (!toastToDismiss) {
      return void 0;
    }
    const duration = toastToDismiss.duration ? Math.max(toastToDismiss.duration, DEFAULT_TOAST_DURATION) : DEFAULT_TOAST_DURATION;
    const timeoutId = setTimeout(() => {
      context.removeToast(toastToDismiss);
    }, duration);
    return () => {
      clearTimeout(timeoutId);
    };
  }, [toasts, context]);
  return /* @__PURE__ */ jsxs(ToastContext.Provider, { value: context, children: [
    children,
    /* @__PURE__ */ jsx(
      "div",
      {
        className: clsx(classes.base, classes[position], className),
        role: "status",
        "aria-live": "polite",
        "aria-atomic": "false",
        children: toasts.map((toast) => {
          const {
            id,
            onClose,
            transition,
            component: Component,
            ...toastProps
          } = toast;
          return (
            // @ts-expect-error The props are enforced by the toast hooks,
            // so this warning can be safely ignored.
            /* @__PURE__ */ createElement(
              Component,
              {
                className: classes.toast,
                ...toastProps,
                key: id,
                isVisible: !transition,
                onClose: () => context.removeToast(toast)
              }
            )
          );
        })
      }
    )
  ] });
}
export {
  ToastContext,
  ToastProvider
};
