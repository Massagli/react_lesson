"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { useRef, useState, useEffect } from "react";
import { utilClasses } from "../../styles/utility.js";
import { clsx } from "../../styles/clsx.js";
import { NOTIFICATION_ICONS } from "../Notification/constants.js";
import classes from "./NotificationToast.module.css.js";
import { createUseToast } from "../ToastContext/createUseToast.js";
import { useAnimation } from "../../hooks/useAnimation/useAnimation.js";
import { Body } from "../Body/Body.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const TRANSITION_DURATION = 200;
const DEFAULT_HEIGHT = "auto";
function NotificationToast({
  variant = "info",
  body,
  headline,
  onClose,
  iconLabel = "",
  isVisible,
  duration,
  // this is the auto-dismiss duration, not the animation duration. We shouldn't pass it to the wrapper along with ...props
  className,
  ...props
}) {
  const contentElement = useRef(null);
  const [isOpen, setOpen] = useState(false);
  const [height, setHeight] = useState(getHeight(contentElement));
  const [, setAnimating] = useAnimation();
  useEffect(() => {
    setAnimating({
      duration: TRANSITION_DURATION,
      onStart: () => {
        setHeight(getHeight(contentElement));
        window.requestAnimationFrame(() => {
          setOpen(isVisible);
        });
      },
      onEnd: () => {
        setHeight(DEFAULT_HEIGHT);
      }
    });
  }, [isVisible, setAnimating]);
  const Icon = NOTIFICATION_ICONS[variant];
  return /* @__PURE__ */ jsx(
    "div",
    {
      ref: contentElement,
      style: {
        opacity: isOpen ? 1 : 0,
        height: isOpen ? height : 0,
        visibility: isOpen ? "visible" : "hidden"
      },
      className: clsx(classes.base, classes[variant], className),
      ...props,
      children: /* @__PURE__ */ jsxs("div", { className: classes.wrapper, children: [
        /* @__PURE__ */ jsx("div", { className: classes.icon, children: /* @__PURE__ */ jsx(Icon, { "aria-hidden": "true" }) }),
        /* @__PURE__ */ jsx("span", { className: utilClasses.hideVisually, children: iconLabel }),
        /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
          headline && /* @__PURE__ */ jsx(Body, { weight: "semibold", as: "h3", children: headline }),
          /* @__PURE__ */ jsx(Body, { children: body })
        ] }),
        /* @__PURE__ */ jsx(
          CloseButton,
          {
            className: classes.close,
            "aria-hidden": "true",
            size: "s",
            onClick: onClose,
            tabIndex: -1
          }
        )
      ] })
    }
  );
}
NotificationToast.TRANSITION_DURATION = TRANSITION_DURATION;
function getHeight(element) {
  if (!element || !element.current) {
    return DEFAULT_HEIGHT;
  }
  return `${element.current.scrollHeight}px`;
}
const useNotificationToast = createUseToast(NotificationToast);
export {
  NotificationToast,
  getHeight,
  useNotificationToast
};
