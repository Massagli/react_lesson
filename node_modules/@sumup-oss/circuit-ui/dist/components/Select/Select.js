"use strict";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { ChevronDown } from "@sumup-oss/icons";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./Select.module.css.js";
import { FieldWrapper, FieldLabel, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
const Select = forwardRef(
  ({
    value,
    defaultValue,
    placeholder,
    disabled,
    invalid,
    required,
    options,
    children,
    renderPrefix: RenderPrefix,
    validationHint,
    optionalLabel,
    label,
    hideLabel,
    className,
    style,
    id: customId,
    "aria-describedby": descriptionId,
    ...props
  }, ref) => {
    const id = useId();
    const selectId = customId || id;
    const validationHintId = useId();
    const descriptionIds = clsx(descriptionId, validationHintId) || void 0;
    const prefix = RenderPrefix && /* @__PURE__ */ jsx(RenderPrefix, { className: classes.prefix, value });
    const hasPrefix = Boolean(prefix);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Select",
        "The `label` prop is missing or invalid. Pass `hideLabel` if you intend to hide the label visually."
      );
    }
    return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(FieldLabel, { htmlFor: selectId, children: /* @__PURE__ */ jsx(
        FieldLabelText,
        {
          label,
          hideLabel,
          optionalLabel,
          required
        }
      ) }),
      /* @__PURE__ */ jsxs("div", { className: classes.wrapper, children: [
        prefix,
        /* @__PURE__ */ jsxs(
          "select",
          {
            id: selectId,
            value,
            ref,
            "aria-describedby": descriptionIds,
            "aria-invalid": invalid && "true",
            required,
            disabled,
            defaultValue,
            className: clsx(classes.base, hasPrefix && classes["has-prefix"]),
            ...props,
            children: [
              !value && !defaultValue && /**
              * We need a key here just like when mapping over options.
              * We're prefixing the key with an underscore to avoid clashes
              * with option values.
              */
              /* @__PURE__ */ jsx("option", { value: "", children: placeholder }, "_placeholder"),
              children || (options == null ? void 0 : options.map(({ label: optionLabel, ...rest }) => /* @__PURE__ */ jsx("option", { ...rest, children: optionLabel }, rest.value)))
            ]
          }
        ),
        /* @__PURE__ */ jsx(ChevronDown, { className: classes.icon, size: "16", "aria-hidden": "true" })
      ] }),
      /* @__PURE__ */ jsx(
        FieldValidationHint,
        {
          id: validationHintId,
          disabled,
          invalid,
          validationHint
        }
      )
    ] });
  }
);
Select.displayName = "Select";
export {
  Select
};
