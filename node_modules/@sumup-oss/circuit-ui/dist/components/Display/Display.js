"use strict";
import { jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { clsx } from "../../styles/clsx.js";
import { CircuitError } from "../../util/errors.js";
import { deprecate } from "../../util/logger.js";
import { getEnvVariable } from "../../util/env.js";
import classes from "./Display.module.css.js";
const deprecatedSizeMap = {
  "one": "l",
  "two": "m",
  "three": "m",
  "four": "s"
};
const Display = forwardRef(
  ({ className, as, size: legacySize = "m", weight = "bold", ...props }, ref) => {
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !getEnvVariable("UNSAFE_DISABLE_ELEMENT_ERRORS") && !as) {
      throw new CircuitError("Display", "The `as` prop is required.");
    }
    if (process.env.NODE_ENV !== "production") {
      if (legacySize in deprecatedSizeMap) {
        deprecate(
          "Display",
          `The "${legacySize}" size has been deprecated. Use the "${deprecatedSizeMap[legacySize]}" size instead.`
        );
      }
    }
    const Element = as || "h1";
    const size = deprecatedSizeMap[legacySize] || legacySize;
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...props,
        ref,
        className: clsx(
          classes.base,
          classes[size],
          classes[weight],
          className
        )
      }
    );
  }
);
Display.displayName = "Display";
export {
  Display
};
