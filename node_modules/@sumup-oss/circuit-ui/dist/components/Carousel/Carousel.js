"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { useRef, useState } from "react";
import { isFunction } from "../../util/type-check.js";
import { ANIMATION_DURATION, SLIDE_DURATION, ASPECT_RATIO, SLIDE_DIRECTIONS } from "./constants.js";
import classes from "./Carousel.module.css.js";
import { useComponentSize } from "../../hooks/useComponentSize/useComponentSize.js";
import { Step } from "../Step/Step.js";
import { Container } from "./components/Container/Container.js";
import { Slides } from "./components/Slides/Slides.js";
import { Slide } from "./components/Slide/Slide.js";
import { SlideImage } from "./components/SlideImage/SlideImage.js";
import { Controls } from "./components/Controls/Controls.js";
import { Status } from "./components/Status/Status.js";
import { ProgressBar } from "../ProgressBar/ProgressBar.js";
import { ButtonList, PlayButton, PrevButton, NextButton } from "./components/Buttons/Buttons.js";
function Carousel({
  slides,
  slideDuration = SLIDE_DURATION,
  animationDuration = ANIMATION_DURATION,
  aspectRatio = ASPECT_RATIO,
  cycle = true,
  autoPlay = true,
  hideControls = false,
  getAriaLabelledBy,
  playButtonLabel,
  pauseButtonLabel,
  prevButtonLabel,
  nextButtonLabel,
  children,
  ...props
}) {
  const slidesTotal = slides.length;
  const slidesRef = useRef(null);
  const slideSize = useComponentSize(slidesRef);
  const [slideDirection, setSlideDirection] = useState();
  if (!slidesTotal) {
    return null;
  }
  const handleNextSlide = () => setSlideDirection(SLIDE_DIRECTIONS.FORWARD);
  const handlePreviousSlide = () => setSlideDirection(SLIDE_DIRECTIONS.BACK);
  return /* @__PURE__ */ jsx(
    Step,
    {
      cycle,
      autoPlay,
      totalSteps: slidesTotal,
      stepDuration: slideDuration,
      animationDuration,
      onNext: handleNextSlide,
      onPrevious: handlePreviousSlide,
      children: ({
        state,
        actions,
        getNextControlProps,
        getPreviousControlProps,
        getPlayControlProps,
        getPauseControlProps
      }) => /* @__PURE__ */ jsxs(Container, { "aria-label": "gallery", ...props, children: [
        /* @__PURE__ */ jsx(Slides, { ref: slidesRef, children: slides.map((slide, index) => /* @__PURE__ */ jsx(
          Slide,
          {
            index,
            step: state.step,
            prevStep: state.previousStep,
            slideSize,
            slideDirection,
            animationDuration,
            children: /* @__PURE__ */ jsx(
              SlideImage,
              {
                src: slide.image.src,
                alt: slide.image.alt,
                aspectRatio,
                "aria-labelledby": getAriaLabelledBy ? getAriaLabelledBy(slide, index) : null
              }
            )
          },
          slide.image.src
        )) }),
        !hideControls && /* @__PURE__ */ jsxs(Controls, { children: [
          /* @__PURE__ */ jsx(
            Status,
            {
              step: state.step,
              total: slidesTotal,
              className: classes.status
            }
          ),
          /* @__PURE__ */ jsx(
            ProgressBar,
            {
              "aria-hidden": true,
              size: "s",
              loop: true,
              paused: state.paused,
              duration: Math.round(
                state.stepDuration + state.animationDuration
              ),
              label: `${state.step + 1} / ${slidesTotal}`,
              hideLabel: true,
              className: classes.progressbar
            },
            state.step
          ),
          /* @__PURE__ */ jsxs(ButtonList, { className: classes.buttons, children: [
            /* @__PURE__ */ jsx(
              PlayButton,
              {
                paused: state.paused,
                ...state.paused ? getPlayControlProps() : getPauseControlProps(),
                children: state.paused ? playButtonLabel : pauseButtonLabel
              }
            ),
            /* @__PURE__ */ jsx(PrevButton, { ...getPreviousControlProps(), children: prevButtonLabel }),
            /* @__PURE__ */ jsx(NextButton, { ...getNextControlProps(), children: nextButtonLabel })
          ] })
        ] }),
        isFunction(children) ? children({ state, actions }) : children
      ] })
    }
  );
}
export {
  Carousel
};
