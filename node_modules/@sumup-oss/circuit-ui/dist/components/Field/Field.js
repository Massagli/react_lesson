"use strict";
import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { forwardRef } from "react";
import { Confirm, Notify, Alert } from "@sumup-oss/icons";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./Field.module.css.js";
import { getFieldValidity } from "./FieldService.js";
const FieldWrapper = forwardRef(
  ({ children, disabled, className, ...props }, ref) => /* @__PURE__ */ jsx(
    "div",
    {
      ref,
      "data-disabled": disabled,
      className: clsx(classes.wrapper, className),
      ...props,
      children
    }
  )
);
const FieldSet = forwardRef(
  ({ className, ...props }, ref) => /* @__PURE__ */ jsx(
    "fieldset",
    {
      ...props,
      ref,
      className: clsx(classes.fieldset, className)
    }
  )
);
const FieldLabel = ({
  className,
  htmlFor,
  ...props
}) => (
  // biome-ignore lint/a11y/noLabelWithoutControl: The control is rendered separately
  /* @__PURE__ */ jsx(
    "label",
    {
      ...props,
      htmlFor,
      className: clsx(classes.label, className)
    }
  )
);
const FieldLegend = ({ className, ...props }) => /* @__PURE__ */ jsx("legend", { ...props, className: clsx(classes.legend, className) });
function FieldLabelText({
  label,
  hideLabel,
  optionalLabel,
  required,
  ...props
}) {
  return /* @__PURE__ */ jsxs(
    "span",
    {
      className: clsx(
        classes["label-text"],
        hideLabel && utilClasses.hideVisually
      ),
      ...props,
      children: [
        label,
        optionalLabel && !required ? /* @__PURE__ */ jsx(
          "span",
          {
            className: classes["label-text-optional"],
            children: ` (${optionalLabel})`
          }
        ) : null
      ]
    }
  );
}
const FieldDescription = ({
  className,
  ...props
}) => /* @__PURE__ */ jsx("span", { ...props, className: clsx(classes.description, className) });
const icons = {
  invalid: Alert,
  warning: Notify,
  valid: Confirm
};
const FieldValidationHint = ({
  validationHint,
  className,
  hasWarning,
  showValid,
  invalid,
  disabled,
  ...props
}) => {
  const validity = getFieldValidity({
    hasWarning,
    showValid,
    invalid,
    disabled
  });
  const Icon = validity && icons[validity];
  const hasMessage = Boolean(validationHint);
  const isStatusMessage = Boolean(validity);
  const classNames = clsx(
    classes["validation-hint"],
    validity && classes[validity],
    className
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    hasMessage && !isStatusMessage && /* @__PURE__ */ jsx("div", { className: classNames, ...props, children: validationHint }),
    /* @__PURE__ */ jsx("span", { role: "status", "aria-live": "polite", children: hasMessage && isStatusMessage && /* @__PURE__ */ jsxs("div", { className: classNames, ...props, children: [
      Icon && /* @__PURE__ */ jsx("div", { className: classes["validation-hint-icon"], children: /* @__PURE__ */ jsx(Icon, { "aria-hidden": "true", size: "16" }) }),
      validationHint
    ] }) })
  ] });
};
export {
  FieldDescription,
  FieldLabel,
  FieldLabelText,
  FieldLegend,
  FieldSet,
  FieldValidationHint,
  FieldWrapper
};
