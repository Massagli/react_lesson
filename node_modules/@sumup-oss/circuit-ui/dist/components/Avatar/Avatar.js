"use strict";
import { jsx } from "react/jsx-runtime";
import { Profile, Image } from "@sumup-oss/icons";
import { CircuitError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { deprecate } from "../../util/logger.js";
import classes from "./Avatar.module.css.js";
const placeholders = {
  object: /* @__PURE__ */ jsx(Image, {}),
  identity: /* @__PURE__ */ jsx(Profile, {})
};
const legacySizeMap = {
  giga: "s",
  yotta: "m"
};
const Avatar = ({
  src,
  alt = "",
  // This default should be removed in the next major
  variant = "object",
  size: legacySize = "m",
  initials,
  className,
  ...props
}) => {
  if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
    if (variant === "object" && initials) {
      throw new CircuitError(
        "Avatar",
        "The `initials` prop can only be used with the identity `variant`. Remove the `initials` prop or change the `variant` to identity."
      );
    }
    if (initials && initials.length > 2) {
      throw new CircuitError(
        "Avatar",
        `The \`initials\` prop is ${initials.length} characters long. Shorten it to 1-2 characters.`
      );
    }
  }
  if (process.env.NODE_ENV !== "production" && legacySizeMap[legacySize]) {
    deprecate(
      "Avatar",
      `The \`${legacySize}\` size has been deprecated. Use the \`${legacySizeMap[legacySize]}\` size instead.`
    );
  }
  const size = legacySizeMap[legacySize] || legacySize;
  if (src) {
    return (
      // biome-ignore lint/a11y/useAltText: The `alt` prop is marked as required.
      /* @__PURE__ */ jsx(
        "img",
        {
          src,
          alt,
          className: clsx(
            classes.base,
            classes[size],
            variant === "identity" && classes.identity,
            className
          ),
          ...props
        }
      )
    );
  }
  const placeholder = variant === "identity" && initials ? initials.slice(0, 2).toUpperCase() : placeholders[variant];
  return /* @__PURE__ */ jsx(
    "div",
    {
      ...alt ? { "role": "img", "aria-label": alt } : { "aria-hidden": "true" },
      className: clsx(
        classes.base,
        classes[size],
        variant === "identity" && classes.identity,
        className
      ),
      ...props,
      children: placeholder
    }
  );
};
export {
  Avatar
};
