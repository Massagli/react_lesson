/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { BreakpointOptions } from '../types.js';
type Option = string | number;
export interface ColProps {
    /**
     * The amount to skip for a column. If the value is a number/string it will
     * be applied with no media query. If the value is an object it will apply
     * each value based on the key breakpoint, i.e. `{ untilKilo: 6 }` will
     * create a style for the untilKilo media query with a skip of 6 columns.
     * Accepts negative values as well.
     */
    skip?: Option | BreakpointOptions<Option>;
    /**
     * The amount to span for a column. If the value is a number/string it will
     * be applied with no media query. If the value is an object it will apply
     * each value based on the key breakpoint, i.e. `{ untilKilo: 6 }` will
     * create a style for the untilKilo media query with a span of 6 columns.
     */
    span?: Option | BreakpointOptions<Option>;
}
/**
 * @legacy
 *
 * Content wrapping for the Grid component. Allows sizing based on provided
 * props.
 */
export declare const Col: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & ColProps, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export {};
