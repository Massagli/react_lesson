"use strict";
import { css } from "@emotion/react";
import isPropValid from "@emotion/is-prop-valid";
import styled from "@emotion/styled";
import { isNumber, isString } from "../../../../util/type-check.js";
import { clamp } from "../../../../util/helpers.js";
import { composeBreakpoints, wrapStyles, normalizeToNumber } from "../utils.js";
import { MIN_COL_SPAN, MAX_COL_WIDTH } from "../constants.js";
const baseStyles = css`
  box-sizing: border-box;
  float: left;
`;
const createGutterStyles = (theme, grid) => {
  const styles = `
      padding-left: calc(${grid.gutter} / 2);
      padding-right: calc(${grid.gutter} / 2);
    `;
  return wrapStyles(theme, grid.breakpoint, styles);
};
const gutterStyles = ({ theme }) => composeBreakpoints(createGutterStyles, theme, theme.grid);
const createSpanStyles = (theme, grid, span) => {
  const value = normalizeToNumber(span);
  const safeSpan = clamp(value, MIN_COL_SPAN, grid.cols);
  const styles = `
    width: ${MAX_COL_WIDTH / grid.cols * safeSpan}%;
  `;
  return wrapStyles(theme, grid.breakpoint, styles);
};
const spanStyles = ({ theme, span = 0 }) => isNumber(span) || isString(span) ? createSpanStyles(theme, theme.grid.default, span) : composeBreakpoints(createSpanStyles, theme, span);
const createSkipStyles = (theme, grid, skip) => {
  const value = normalizeToNumber(skip);
  const safeSkip = clamp(value, grid.cols * -1, grid.cols - 1);
  const styles = `
    left: ${MAX_COL_WIDTH / grid.cols * safeSkip}%;
    position: relative;
  `;
  return wrapStyles(theme, grid.breakpoint, styles);
};
const skipStyles = ({ theme, skip = 0 }) => isNumber(skip) || isString(skip) ? createSkipStyles(theme, theme.grid.default, skip) : composeBreakpoints(createSkipStyles, theme, skip);
const Col = styled("div", {
  shouldForwardProp: (prop) => isPropValid(prop) && prop !== "span"
})(baseStyles, gutterStyles, spanStyles, skipStyles);
export {
  Col
};
