"use strict";
import { css } from "@emotion/react";
import styled from "@emotion/styled";
import { typography } from "../../../styles/style-mixins.js";
const baseStyles = ({ theme }) => css`
  display: inline-block;
  width: max-content;
  max-width: 360px;
  background-color: var(--cui-bg-elevated);
  border-radius: ${theme.borderRadius.byte};
  border: ${theme.borderWidth.kilo} solid var(--cui-border-subtle);
  box-shadow: 0 2px 6px 0 rgb(0 0 0 / 8%);
  padding: ${theme.spacings.byte} ${theme.spacings.kilo};
  position: absolute;
  z-index: ${theme.zIndex.tooltip};
  transition: opacity 0.3s;
`;
const positionMap = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
const getPositionStyles = ({
  theme,
  position
}) => {
  const absolutePosition = positionMap[position];
  return `
    ${absolutePosition}: calc(100% + ${theme.spacings.bit});
  `;
};
function isVerticalAlignment(value) {
  return value === "top" || value === "center" || value === "bottom";
}
function isHorizontalAlignment(value) {
  return value === "left" || value === "center" || value === "right";
}
const getAlignmentStyles = ({
  theme,
  position,
  align
}) => {
  const isHorizontal = position === "bottom" || position === "top";
  if (isHorizontal && isVerticalAlignment(align)) {
    return `
      left: 50%;
      transform: translateX(-50%);
    `;
  }
  if (!isHorizontal && isHorizontalAlignment(align)) {
    return `
      top: 50%;
      transform: translateY(-50%);
    `;
  }
  const absolutePosition = positionMap[align];
  return `
    ${absolutePosition}: 50%;
    ${absolutePosition}: calc(50% - (${theme.spacings.mega} + ${theme.spacings.bit}));
  `;
};
const positionAndAlignStyles = ({
  theme,
  position = "right",
  align = "center"
}) => css`
  ${getAlignmentStyles({ theme, position, align })};
  ${getPositionStyles({ theme, position })};
`;
const Tooltip = styled.div(
  typography("two"),
  baseStyles,
  positionAndAlignStyles
);
export {
  Tooltip
};
