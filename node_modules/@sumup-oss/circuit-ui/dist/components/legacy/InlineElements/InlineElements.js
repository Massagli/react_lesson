"use strict";
import { Children } from "react";
import { css } from "@emotion/react";
import styled from "@emotion/styled";
import { clearfix } from "../../../styles/style-mixins.js";
const fallbackBaseStyles = ({
  theme,
  children
}) => {
  const childrenCount = Children.count(children);
  const width = `(100% - ${childrenCount - 1} * ${theme.spacings.byte}) / ${childrenCount}`;
  return css`
    > * {
      display: block;
      width: 100%;
    }
    ${theme.mq.kilo} {
      > * {
        float: left;
        width: ${1 / childrenCount * 95}%;
        width: calc(${width});
      }
      ${clearfix()};
    }
  `;
};
const baseStyles = ({
  theme,
  ratios = [],
  children
}) => {
  const flexGrows = ratios.length && Children.map(
    children,
    (_, childIndex) => `
        > :nth-child(${childIndex + 1}) {
          flex-grow: ${ratios[childIndex] || 1};
          width: auto;
        }
      `
  ).join("\n");
  return css`
    display: flex;
    flex-direction: column;
    width: 100%;

    > * {
      &:not(:last-of-type) {
        margin-bottom: ${theme.spacings.byte};
      }
    }

    ${theme.mq.kilo} {
      align-items: stretch;
      flex-direction: row;
      justify-content: stretch;

      > * {
        flex-grow: 1;
        width: auto;

        &:not(:last-of-type) {
          margin-bottom: 0;
          margin-right: ${theme.spacings.byte};
        }
      }

      ${flexGrows};
    }
  `;
};
const fallbackInlineMobileStyles = ({
  theme,
  inlineMobile,
  children
}) => {
  if (!inlineMobile) {
    return null;
  }
  const childrenCount = Children.count(children);
  const width = `(100% - ${childrenCount - 1} * ${theme.spacings.byte}) / ${childrenCount}`;
  return css`
    ${theme.mq.untilKilo} {
      > * {
        float: left;
        width: ${1 / childrenCount * 95}%;
        width: calc(${width});
      }
      ${clearfix()};
    }
  `;
};
const inlineMobileStyles = ({
  theme,
  inlineMobile
}) => inlineMobile && css`
    ${theme.mq.untilKilo} {
      flex-direction: row;
      flex-grow: 1;
      width: auto;

      > * {
        &:not(:last-of-type) {
          margin-bottom: 0;
          margin-right: ${theme.spacings.byte};
        }
      }
    }
  `;
const InlineElements = styled("div")(
  fallbackBaseStyles,
  baseStyles,
  fallbackInlineMobileStyles,
  inlineMobileStyles
);
export {
  InlineElements
};
