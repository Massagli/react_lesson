"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useId } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import { RadioButtonInput } from "../RadioButtonGroup/RadioButtonInput.js";
import classes from "./RadioButton.module.css.js";
import { FieldWrapper, FieldDescription } from "../Field/Field.js";
const RadioButton = forwardRef(
  ({
    label,
    description,
    disabled,
    "aria-describedby": describedBy,
    id: customId,
    className,
    style,
    ...props
  }, ref) => {
    const id = useId();
    const inputId = customId || id;
    const descriptionId = useId();
    const descriptionIds = clsx(describedBy, description && descriptionId);
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "RadioButton",
        "The `label` prop is missing or invalid."
      );
    }
    return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(
        RadioButtonInput,
        {
          ...props,
          ref,
          id: inputId,
          disabled,
          "aria-describedby": descriptionIds,
          align: "start",
          children: /* @__PURE__ */ jsxs("span", { className: classes["label-text"], children: [
            label,
            description && /* @__PURE__ */ jsx(FieldDescription, { "aria-hidden": "true", children: description })
          ] })
        }
      ),
      description && /* @__PURE__ */ jsx("p", { id: descriptionId, className: utilClasses.hideVisually, children: description })
    ] });
  }
);
RadioButton.displayName = "RadioButton";
export {
  RadioButton
};
