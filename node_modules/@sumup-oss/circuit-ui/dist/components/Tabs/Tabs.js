"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { useState, Fragment } from "react";
import { isArrowLeft, isArrowRight, isArrowDown } from "../../util/key-codes.js";
import { TabList } from "./components/TabList/TabList.js";
import { Tab } from "./components/Tab/Tab.js";
import { TabPanel } from "./components/TabPanel/TabPanel.js";
function Tabs({ items, initialSelectedIndex = 0, ...props }) {
  var _a;
  const [selectedId, setSelectedId] = useState((_a = items[initialSelectedIndex]) == null ? void 0 : _a.id);
  const handleTabKeyDown = (event) => {
    var _a2, _b, _c;
    const selectedIndex = items.findIndex((item) => item.id === selectedId);
    if (isArrowLeft(event)) {
      const previousIndex = selectedIndex - 1;
      if (previousIndex >= 0) {
        const previousId = items[previousIndex].id;
        setSelectedId(previousId);
        (_a2 = document.getElementById(`tab-${previousId}`)) == null ? void 0 : _a2.focus();
      }
    } else if (isArrowRight(event)) {
      const nextIndex = selectedIndex + 1;
      if (nextIndex <= items.length - 1) {
        const nextId = items[nextIndex].id;
        setSelectedId(nextId);
        (_b = document.getElementById(`tab-${nextId}`)) == null ? void 0 : _b.focus();
      }
    } else if (isArrowDown(event)) {
      (_c = document.getElementById(`panel-${selectedId}`)) == null ? void 0 : _c.focus();
    }
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(TabList, { ...props, children: items.map(({ id, tab }) => /* @__PURE__ */ jsx(
      Tab,
      {
        "data-testid": "tab-element",
        selected: selectedId === id,
        onClick: () => setSelectedId(id),
        id: `tab-${id}`,
        "aria-controls": `panel-${id}`,
        onKeyDown: handleTabKeyDown,
        children: tab
      },
      id
    )) }),
    items.map(({ id, panel }) => /* @__PURE__ */ jsx(
      TabPanel,
      {
        "data-testid": "tab-panel",
        id: `panel-${id}`,
        "aria-labelledby": `tab-${id}`,
        hidden: selectedId !== id,
        children: panel
      },
      id
    ))
  ] });
}
export {
  Tabs
};
