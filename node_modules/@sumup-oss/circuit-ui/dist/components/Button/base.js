"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { utilClasses } from "../../styles/utility.js";
import { clsx } from "../../styles/clsx.js";
import { useI18n } from "../../hooks/useI18n/useI18n.js";
import classes from "./base.module.css.js";
import { translations } from "./translations/index.js";
import { useComponents } from "../ComponentsContext/useComponents.js";
const legacyButtonSizeMap = {
  kilo: "s",
  giga: "m"
};
function createButtonComponent(componentName, mapProps) {
  const Button = forwardRef((props, ref) => {
    const {
      children,
      onClick,
      disabled,
      destructive,
      size = "m",
      variant = "secondary",
      isLoading,
      loadingLabel,
      className,
      icon: LeadingIcon,
      navigationIcon: TrailingIcon,
      as,
      locale,
      ...sharedProps
    } = useI18n(mapProps(props), translations);
    const components = useComponents();
    const Link = components.Link;
    const isLink = Boolean(sharedProps.href);
    const Element = as || (isLink ? Link : "button");
    const leadingIconSize = size === "s" ? "16" : "24";
    const trailingIconSize = "16";
    const hasLoadingState = typeof isLoading !== "undefined";
    const isDisabled = Boolean(disabled || isLoading);
    const onDisabledClick = (event) => {
      event.preventDefault();
      event.stopPropagation();
      event.nativeEvent.stopImmediatePropagation();
    };
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(children, sharedProps)) {
      throw new AccessibilityError(
        componentName,
        "The `children` prop is missing or invalid."
      );
    }
    return /* @__PURE__ */ jsxs(
      Element,
      {
        ...sharedProps,
        ...hasLoadingState && {
          "aria-live": "polite",
          "aria-busy": Boolean(isLoading)
        },
        ...isDisabled && {
          "aria-disabled": true
        },
        onClick: isDisabled ? onDisabledClick : onClick,
        className: clsx(
          classes.base,
          classes[variant],
          classes[size],
          destructive && classes.destructive,
          utilClasses.focusVisible,
          className
        ),
        ref,
        children: [
          /* @__PURE__ */ jsxs("span", { className: classes.loader, "aria-hidden": !isLoading, children: [
            /* @__PURE__ */ jsx("span", { className: classes.dot }),
            /* @__PURE__ */ jsx("span", { className: classes.dot }),
            /* @__PURE__ */ jsx("span", { className: classes.dot }),
            /* @__PURE__ */ jsx("span", { className: utilClasses.hideVisually, children: loadingLabel })
          ] }),
          /* @__PURE__ */ jsxs("span", { className: classes.content, children: [
            LeadingIcon && /* @__PURE__ */ jsx(
              LeadingIcon,
              {
                "aria-hidden": "true",
                className: classes["leading-icon"],
                size: leadingIconSize,
                width: leadingIconSize,
                height: leadingIconSize
              }
            ),
            /* @__PURE__ */ jsx("span", { className: classes.label, children }),
            TrailingIcon && /* @__PURE__ */ jsx(
              TrailingIcon,
              {
                "aria-hidden": "true",
                className: classes["trailing-icon"],
                size: trailingIconSize,
                width: trailingIconSize,
                height: trailingIconSize
              }
            )
          ] })
        ]
      }
    );
  });
  Button.displayName = componentName;
  return Button;
}
export {
  createButtonComponent,
  legacyButtonSizeMap
};
