"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { Children, cloneElement } from "react";
import { clsx } from "../../styles/clsx.js";
import { CircuitError } from "../../util/errors.js";
import { deprecate } from "../../util/logger.js";
import { isString } from "../../util/type-check.js";
import { createButtonComponent, legacyButtonSizeMap } from "./base.js";
import classes from "./IconButton.module.css.js";
const IconButton = createButtonComponent(
  "IconButton",
  ({
    className,
    icon: Icon,
    label,
    children,
    size: legacySize = "m",
    ...props
  }) => {
    const size = legacyButtonSizeMap[legacySize] || legacySize;
    if (process.env.NODE_ENV !== "production" && !Icon && Children.count(children) !== 1) {
      throw new CircuitError("IconButton", "The `icon` prop is missing.");
    }
    if (process.env.NODE_ENV !== "production" && !isString(children)) {
      deprecate(
        "IconButton",
        "The `children` prop has been deprecated for passing the icon. Use the `icon` prop instead."
      );
    }
    if (process.env.NODE_ENV !== "production" && label) {
      deprecate(
        "IconButton",
        "The `label` prop has been deprecated. Use the `children` prop instead."
      );
    }
    if (process.env.NODE_ENV !== "production" && legacyButtonSizeMap[legacySize]) {
      deprecate(
        "IconButton",
        `The \`${legacySize}\` size has been deprecated. Use the \`${legacyButtonSizeMap[legacySize]}\` size instead.`
      );
    }
    return {
      className: clsx(classes.base, classes[size], className),
      icon: (iconProps) => {
        if (Icon) {
          return /* @__PURE__ */ jsx(Icon, { ...iconProps });
        }
        const child = Children.only(children);
        if (isString(child)) {
          return null;
        }
        return cloneElement(child, iconProps);
      },
      size,
      children: isString(children) ? children : label,
      title: isString(children) ? children : label,
      ...props
    };
  }
);
IconButton.displayName = "IconButton";
export {
  IconButton
};
