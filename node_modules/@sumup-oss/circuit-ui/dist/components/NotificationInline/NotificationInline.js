"use strict";
"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef, useRef, useState, useEffect } from "react";
import { isString } from "../../util/type-check.js";
import { NOTIFICATION_ICONS } from "../Notification/constants.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import classes from "./NotificationInline.module.css.js";
import { useAnimation } from "../../hooks/useAnimation/useAnimation.js";
import { Body } from "../Body/Body.js";
import { Anchor } from "../Anchor/Anchor.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
const TRANSITION_DURATION = 200;
const DEFAULT_HEIGHT = "auto";
const NotificationInline = forwardRef(
  ({
    variant = "info",
    body,
    headline,
    action,
    onClose,
    closeButtonLabel,
    iconLabel = "",
    isVisible = true,
    className,
    ...props
  }, ref) => {
    const contentElement = useRef(null);
    const [isOpen, setOpen] = useState(isVisible);
    const [height, setHeight] = useState(getHeight(contentElement));
    const [, setAnimating] = useAnimation();
    useEffect(() => {
      setAnimating({
        duration: TRANSITION_DURATION,
        onStart: () => {
          setHeight(getHeight(contentElement));
          window.requestAnimationFrame(() => {
            setOpen(isVisible);
          });
        },
        onEnd: () => {
          setHeight(DEFAULT_HEIGHT);
        }
      });
    }, [isVisible, setAnimating]);
    const Icon = NOTIFICATION_ICONS[variant];
    return /* @__PURE__ */ jsx(
      "div",
      {
        ref: applyMultipleRefs(ref, contentElement),
        style: {
          opacity: isOpen ? 1 : 0,
          height: isOpen ? height : 0,
          visibility: isOpen ? "visible" : "hidden"
        },
        className: clsx(classes.base, className),
        ...props,
        children: /* @__PURE__ */ jsxs("div", { className: clsx(classes.wrapper, classes[variant]), children: [
          /* @__PURE__ */ jsx("div", { className: classes.icon, children: /* @__PURE__ */ jsx(Icon, { "aria-hidden": "true" }) }),
          /* @__PURE__ */ jsx("span", { className: utilClasses.hideVisually, children: iconLabel }),
          /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
            headline && /* @__PURE__ */ jsx(
              Body,
              {
                weight: "semibold",
                as: isString(headline) ? "h3" : headline.as,
                children: isString(headline) ? headline : headline.label
              }
            ),
            /* @__PURE__ */ jsx(Body, { children: body }),
            action && /* @__PURE__ */ jsx(
              Anchor,
              {
                ...action,
                className: clsx(action.className, classes.action),
                weight: "bold"
              }
            )
          ] }),
          onClose && closeButtonLabel && /* @__PURE__ */ jsx(CloseButton, { className: classes.close, size: "s", onClick: onClose, children: closeButtonLabel })
        ] })
      }
    );
  }
);
NotificationInline.TIMEOUT = TRANSITION_DURATION;
function getHeight(element) {
  if (!element || !element.current) {
    return DEFAULT_HEIGHT;
  }
  return `${element.current.scrollHeight}px`;
}
export {
  NotificationInline,
  getHeight
};
