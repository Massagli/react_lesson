"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useState, useEffect } from "react";
import { applyMultipleRefs } from "../../util/refs.js";
import { clsx } from "../../styles/clsx.js";
import { deprecate } from "../../util/logger.js";
import classes from "./NotificationBanner.module.css.js";
import { useAnimation } from "../../hooks/useAnimation/useAnimation.js";
import { Headline } from "../Headline/Headline.js";
import { Body } from "../Body/Body.js";
import { Button } from "../Button/Button.js";
import { CloseButton } from "../CloseButton/CloseButton.js";
import { Image } from "../Image/Image.js";
const DEFAULT_HEIGHT = "auto";
function NotificationImage({
  align = "center",
  width = 200,
  className,
  ...props
}) {
  return /* @__PURE__ */ jsx(
    Image,
    {
      ...props,
      className: clsx(classes.image, className),
      style: {
        "--notification-image-align": align,
        "--notification-image-width": `${width}px`
      }
    }
  );
}
const NotificationBanner = forwardRef(
  ({
    headline,
    body,
    action,
    variant = "system",
    image,
    onClose,
    closeButtonLabel,
    isVisible = true,
    className,
    ...props
  }, ref) => {
    const contentElement = useRef(null);
    const [isOpen, setOpen] = useState(isVisible);
    const [height, setHeight] = useState(getHeight(contentElement));
    const [, setAnimating] = useAnimation();
    useEffect(() => {
      setAnimating({
        duration: 200,
        onStart: () => {
          setHeight(getHeight(contentElement));
          window.requestAnimationFrame(() => {
            setOpen(isVisible);
          });
        },
        onEnd: () => {
          setHeight(DEFAULT_HEIGHT);
        }
      });
    }, [isVisible, setAnimating]);
    if (process.env.NODE_ENV !== "production" && action.variant === "tertiary") {
      deprecate(
        "NotificationBanner",
        "The action's `tertiary` variant has been deprecated. Use the `primary` variant instead."
      );
    }
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ref: applyMultipleRefs(ref, contentElement),
        style: {
          opacity: isOpen ? 1 : 0,
          height: isOpen ? height : 0,
          visibility: isOpen ? "visible" : "hidden"
        },
        className: clsx(classes.base, classes[variant], className),
        ...props,
        children: [
          /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
            /* @__PURE__ */ jsx(Headline, { as: "h2", className: classes.headline, children: headline }),
            body && /* @__PURE__ */ jsx(Body, { className: classes.body, children: body }),
            /* @__PURE__ */ jsx(
              Button,
              {
                ...action,
                variant: action.variant === "tertiary" ? "secondary" : "primary",
                className: clsx(action.className, classes.button),
                size: "s"
              }
            )
          ] }),
          (image == null ? void 0 : image.src) && /* @__PURE__ */ jsx(NotificationImage, { ...image }),
          onClose && closeButtonLabel && /* @__PURE__ */ jsx(CloseButton, { className: classes.close, size: "s", onClick: onClose, children: closeButtonLabel })
        ]
      }
    );
  }
);
function getHeight(element) {
  if (!element || !element.current) {
    return DEFAULT_HEIGHT;
  }
  return `${element.current.scrollHeight}px`;
}
export {
  NotificationBanner,
  getHeight
};
