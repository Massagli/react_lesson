"use strict";
import { isFunction, isArray } from "../../util/type-check.js";
const mapRowProps = (props) => isArray(props) ? { cells: props } : props;
const getRowCells = (props) => mapRowProps(props).cells;
function mapCellProps(props) {
  return typeof props === "string" || typeof props === "number" || props === null || props === void 0 ? { children: props } : props;
}
const getSortByValue = (props) => {
  const cell = mapCellProps(props);
  return cell.sortByValue !== void 0 ? cell.sortByValue : cell.children;
};
const getSortDirection = (isActive, currentSort) => {
  if (!currentSort || !isActive) {
    return "ascending";
  }
  return currentSort === "ascending" ? "descending" : "ascending";
};
const ascendingSort = (i) => (a, b) => {
  const firstRow = getRowCells(a);
  const secondRow = getRowCells(b);
  const first = getSortByValue(firstRow[i]);
  const second = getSortByValue(secondRow[i]);
  if (first === null || first === void 0 || second === null || second === void 0) {
    return 0;
  }
  if (first < second) {
    return -1;
  }
  if (first > second) {
    return 1;
  }
  return 0;
};
const descendingSort = (i) => (a, b) => {
  const firstRow = getRowCells(a);
  const secondRow = getRowCells(b);
  const first = getSortByValue(firstRow[i]);
  const second = getSortByValue(secondRow[i]);
  if (first === null || first === void 0 || second === null || second === void 0) {
    return 0;
  }
  if (first > second) {
    return -1;
  }
  if (first < second) {
    return 1;
  }
  return 0;
};
const getSortParams = ({
  columnIndex,
  sortable,
  sortDirection,
  sortLabel,
  sortedColumn
}) => {
  if (!sortable || !sortLabel) {
    return { sortable: false };
  }
  const isSorted = sortedColumn === columnIndex;
  return {
    sortable: true,
    sortLabel: isFunction(sortLabel) ? sortLabel({ direction: sortDirection }) : sortLabel,
    sortDirection: isSorted ? sortDirection : void 0,
    isSorted
  };
};
function defaultSortBy(i, rows, direction) {
  const sortFn = direction === "ascending" ? ascendingSort : descendingSort;
  return [...rows].sort(sortFn(i));
}
export {
  ascendingSort,
  defaultSortBy,
  descendingSort,
  getRowCells,
  getSortByValue,
  getSortDirection,
  getSortParams,
  mapCellProps,
  mapRowProps
};
