"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { Fragment } from "react";
import { mapCellProps, getSortParams } from "../../utils.js";
import { clsx } from "../../../../styles/clsx.js";
import classes from "./TableHead.module.css.js";
import { TableRow } from "../TableRow/TableRow.js";
import { TableHeader } from "../TableHeader/TableHeader.js";
function TableHead({
  headers = [],
  rowHeaders = false,
  condensed,
  scrollable,
  top,
  onSortBy,
  sortDirection,
  sortedColumn,
  onSortEnter,
  onSortLeave
}) {
  return /* @__PURE__ */ jsx(
    "thead",
    {
      className: clsx(
        scrollable && classes.fixed,
        rowHeaders && classes["row-headers"]
      ),
      style: { "--table-head-top": `${top || 0}px` },
      children: !!headers.length && /* @__PURE__ */ jsx(TableRow, { children: headers.map((header, i) => {
        const { sortable, sortLabel, ...cellProps } = mapCellProps(header);
        const sortParams = getSortParams({
          columnIndex: i,
          sortable,
          sortDirection,
          sortLabel,
          sortedColumn
        });
        return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
          TableHeader,
          {
            ...cellProps,
            condensed,
            fixed: rowHeaders && i === 0,
            onClick: sortParams.sortable ? onSortBy && (() => onSortBy(i)) : void 0,
            onMouseEnter: sortParams.sortable ? onSortEnter && (() => onSortEnter(i)) : void 0,
            onMouseLeave: sortParams.sortable ? onSortLeave && (() => onSortLeave(i)) : void 0,
            sortParams
          }
        ) }, `table-header-${i}`);
      }) })
    }
  );
}
export {
  TableHead
};
