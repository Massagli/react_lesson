"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, useRef, useId, useCallback, useEffect } from "react";
import { clsx } from "../../styles/clsx.js";
import { applyMultipleRefs } from "../../util/refs.js";
import { changeInputValue } from "../../util/input-value.js";
import classes from "./ColorInput.module.css.js";
import { isValidColor, normalizeColor, isSameColor } from "./ColorInputService.js";
import { FieldSet, FieldLegend, FieldLabelText, FieldValidationHint } from "../Field/Field.js";
import inputClasses from "../Input/Input.module.css.js";
import "../Input/Input.js";
const ColorInput = forwardRef(
  ({
    "aria-describedby": descriptionId,
    className,
    defaultValue,
    disabled,
    hasWarning,
    showValid,
    hideLabel,
    invalid,
    label,
    onChange,
    optionalLabel,
    validationHint,
    placeholder,
    readOnly,
    required,
    inputClassName,
    style,
    value,
    ...props
  }, ref) => {
    var _a;
    const colorPickerRef = useRef(null);
    const colorInputRef = useRef(null);
    const labelId = useId();
    const pickerId = useId();
    const validationHintId = useId();
    const descriptionIds = clsx(validationHintId, descriptionId);
    const updatePickerValue = useCallback((color) => {
      if (!colorPickerRef.current || !isValidColor(color)) {
        return;
      }
      changeInputValue(colorPickerRef.current, normalizeColor(color));
    }, []);
    const updateInputValue = useCallback((color) => {
      if (!colorInputRef.current || !color) {
        return;
      }
      const currentColor = colorInputRef.current.value;
      if (!isSameColor(currentColor, color)) {
        changeInputValue(colorInputRef.current, color.trim().replace("#", ""));
      }
    }, []);
    useEffect(() => {
      updateInputValue(value);
    }, [updateInputValue, value]);
    const handlePaste = (event) => {
      if (!colorPickerRef.current || !colorInputRef.current || readOnly) {
        return;
      }
      const pastedText = event.clipboardData.getData("text/plain").trim();
      if (!pastedText || !isValidColor(pastedText)) {
        return;
      }
      event.preventDefault();
      updatePickerValue(pastedText);
      updateInputValue(pastedText);
    };
    const onPickerChange = (event) => {
      onChange == null ? void 0 : onChange(event);
      updateInputValue(event.target.value);
    };
    const onInputChange = (event) => {
      updatePickerValue(event.target.value);
    };
    return /* @__PURE__ */ jsxs(FieldSet, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(FieldLegend, { id: labelId, children: /* @__PURE__ */ jsx(
        FieldLabelText,
        {
          label,
          hideLabel,
          optionalLabel,
          required
        }
      ) }),
      /* @__PURE__ */ jsxs("div", { className: classes.wrapper, children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            htmlFor: pickerId,
            className: classes.picker,
            "data-disabled": disabled || readOnly,
            children: /* @__PURE__ */ jsx(
              "input",
              {
                id: pickerId,
                ref: applyMultipleRefs(colorPickerRef, ref),
                type: "color",
                "aria-labelledby": labelId,
                "aria-describedby": descriptionIds,
                "aria-invalid": invalid ? "true" : void 0,
                className: classes["color-input"],
                onChange: onPickerChange,
                disabled: disabled || readOnly,
                required,
                defaultValue: defaultValue && normalizeColor(defaultValue),
                value: value && normalizeColor(value),
                ...props
              }
            )
          }
        ),
        /* @__PURE__ */ jsx("span", { className: classes.symbol, children: "#" }),
        /* @__PURE__ */ jsx(
          "input",
          {
            ref: colorInputRef,
            type: "text",
            "aria-labelledby": labelId,
            "aria-describedby": descriptionIds,
            className: clsx(
              inputClasses.base,
              !disabled && hasWarning && inputClasses.warning,
              classes.input,
              inputClassName
            ),
            "aria-invalid": invalid ? "true" : void 0,
            required,
            maxLength: 6,
            pattern: "[0-9a-f]{3,6}",
            readOnly,
            disabled,
            defaultValue: (_a = defaultValue || value) == null ? void 0 : _a.replace("#", ""),
            placeholder: placeholder == null ? void 0 : placeholder.replace("#", ""),
            onChange: onInputChange,
            onPaste: handlePaste
          }
        )
      ] }),
      /* @__PURE__ */ jsx(
        FieldValidationHint,
        {
          id: validationHintId,
          disabled,
          invalid,
          hasWarning,
          showValid,
          validationHint
        }
      )
    ] });
  }
);
ColorInput.displayName = "ColorInput";
export {
  ColorInput
};
