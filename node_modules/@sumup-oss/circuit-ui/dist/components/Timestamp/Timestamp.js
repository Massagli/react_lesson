"use strict";
"use client";
import { jsx } from "react/jsx-runtime";
import { forwardRef, useState, useEffect } from "react";
import { Temporal } from "temporal-polyfill";
import { clsx } from "../../styles/clsx.js";
import { getInitialState, getState } from "./TimestampService.js";
import classes from "./Timestamp.module.css.js";
const Timestamp = forwardRef(
  ({
    datetime,
    variant = "auto",
    formatStyle = "long",
    includeTime = false,
    locale,
    className,
    ...props
  }, ref) => {
    const zonedDateTime = Temporal.ZonedDateTime.from(datetime);
    const [state, setState] = useState(
      getInitialState({ datetime, locale, formatStyle, includeTime })
    );
    useEffect(() => {
      setState(
        getState({
          datetime,
          locale,
          formatStyle,
          variant,
          includeTime
        })
      );
    }, [datetime, variant, formatStyle, locale, includeTime]);
    useEffect(() => {
      if (!state.interval) {
        return void 0;
      }
      const timer = setInterval(() => {
        setState(
          getState({
            datetime,
            locale,
            formatStyle,
            variant,
            includeTime
          })
        );
      }, state.interval);
      return () => {
        clearInterval(timer);
      };
    }, [state.interval, datetime, variant, formatStyle, locale, includeTime]);
    return /* @__PURE__ */ jsx(
      "time",
      {
        ref,
        dateTime: zonedDateTime.toString({ timeZoneName: "never" }),
        title: zonedDateTime.toLocaleString(locale, {
          year: "numeric",
          month: "short",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          timeZoneName: "short"
        }),
        className: clsx(className, classes.base),
        ...props,
        children: state.label
      }
    );
  }
);
export {
  Timestamp
};
