/**
 * Copyright 2021, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type React from 'react';
import { type KeyboardEvent, type AnchorHTMLAttributes, type ButtonHTMLAttributes } from 'react';
import { type Placement } from '@floating-ui/react-dom';
import type { IconComponentType } from '@sumup-oss/icons';
import type { ClickEvent } from '../../types/events.js';
export interface BaseProps {
    /**
     * The Popover item label.
     */
    children: string;
    /**
     * Function that's called when the item is clicked.
     */
    onClick?: (event: ClickEvent) => void;
    /**
     * Display an icon in addition to the label. Designed for 24px icons from `@sumup-oss/icons`.
     */
    icon?: IconComponentType;
    /**
     * Destructive variant, changes the color of label and icon from blue to red to signal to the user that the action
     * is irreversible or otherwise dangerous. Interactive states are the same for destructive variant.
     */
    destructive?: boolean;
    /**
     * Disabled variant. Visually and functionally disable the button.
     */
    disabled?: boolean;
}
type LinkElProps = Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'>;
type ButtonElProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>;
export type PopoverItemProps = BaseProps & LinkElProps & ButtonElProps;
export declare const PopoverItem: ({ children, icon: Icon, destructive, className, ...props }: PopoverItemProps) => import("react/jsx-runtime").JSX.Element;
type Divider = {
    type: 'divider';
};
type Action = PopoverItemProps | Divider;
type OnToggle = (open: boolean | ((prevOpen: boolean) => boolean)) => void;
export interface PopoverProps {
    /**
     * The class name to add to the Popover wrapper element.
     */
    className?: string;
    /**
     * Determines whether the Popover is open or closed.
     */
    isOpen: boolean;
    /**
     * Function that is called when opening and closing the Popover.
     */
    onToggle: OnToggle;
    /**
     * An array of PopoverItem or Divider.
     */
    actions: Action[];
    /**
     * One of the accepted placement values. Defaults to `bottom`.
     */
    placement?: Placement;
    /**
     * The placements to fallback to when there is not enough space for the
     * Popover. Defaults to `['top', 'right', 'left']`.
     */
    fallbackPlacements?: Placement[];
    /**
     * Displaces the floating element from its `placement` along specified axes.
     *
     * Pass a number to move the floating element on the main axis, away from (if
     * positive) or towards (if negative) the reference element. Pass an object
     * to displace the floating element on both the main and cross axes.
     */
    offset?: number | {
        mainAxis?: number;
        crossAxis?: number;
    };
    /**
     * The component that toggles the Popover when clicked. Also referred to as
     * reference element.
     */
    component: (props: {
        'onClick': (event: ClickEvent) => void;
        'onKeyDown': (event: KeyboardEvent) => void;
        'id': string;
        'aria-controls': string;
        'aria-expanded': boolean;
    }) => React.JSX.Element;
    /**
     * Remove the [`menu` role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/roles/menu_role)
     * when its semantics aren't appropriate for the use case, for example when
     * the Popover is used as part of a navigation. Default: 'menu'.
     *
     * Learn more: https://inclusive-components.design/menus-menu-buttons/
     */
    role?: 'menu' | null;
}
export declare const Popover: ({ isOpen, onToggle, actions, placement, fallbackPlacements, component: Component, offset, className, role, ...props }: PopoverProps) => import("react/jsx-runtime").JSX.Element;
export {};
