/**
 * Copyright 2019, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { type ComponentType, type InputHTMLAttributes } from 'react';
export type SelectorSize = 's' | 'm' | 'flexible'
/**
 * @deprecated
 */
 | 'kilo'
/**
 * @deprecated
 */
 | 'mega';
export interface SelectorProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /**
     * A clear and concise description of the input's purpose.
     */
    label: string;
    /**
     * A more detailed description of the input's purpose.
     */
    description?: string;
    /**
     * Display an icon in addition to the text to help to identify the option.
     */
    icon?: ComponentType<{
        'className': string;
        'aria-hidden': 'true';
    }>;
    /**
     * Value string for input.
     */
    value: string;
    /**
     * A unique identifier for the input field. If not defined, a randomly generated id is used.
     */
    id?: string;
    /**
     * The name of the selector.
     */
    name?: string;
    /**
     * Choose from 3 sizes. Default: 'm'.
     */
    size?: SelectorSize;
    /**
     * Whether the selector is selected or not.
     */
    checked?: boolean;
    /**
     *Marks the input as invalid.
     */
    invalid?: boolean;
    /**
     * Whether the selector is disabled or not.
     */
    disabled?: boolean;
    /**
     * Whether the user can select multiple options.
     */
    multiple?: boolean;
    children?: never;
}
export declare const SelectorGroupContext: import("react").Context<boolean>;
/**
 * @deprecated Use the {@link SelectorGroup} component instead.
 */
export declare const Selector: import("react").ForwardRefExoticComponent<SelectorProps & import("react").RefAttributes<HTMLInputElement>>;
