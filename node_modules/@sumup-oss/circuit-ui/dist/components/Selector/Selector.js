"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef, createContext, useId, useContext, Fragment } from "react";
import { isSufficientlyLabelled, AccessibilityError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import { utilClasses } from "../../styles/utility.js";
import { deprecate } from "../../util/logger.js";
import classes from "./Selector.module.css.js";
import { FieldWrapper } from "../Field/Field.js";
const SelectorGroupContext = createContext(false);
const legacySizeMap = {
  kilo: "s",
  mega: "m"
};
const Selector = forwardRef(
  ({
    label,
    description,
    icon: Icon,
    value,
    id: customId,
    name,
    disabled,
    invalid,
    multiple,
    onChange,
    "aria-describedby": describedBy,
    className,
    style,
    size: legacySize = "m",
    children,
    ...props
  }, ref) => {
    const randomId = useId();
    const inputId = customId || randomId;
    const descriptionId = useId();
    const descriptionIds = [describedBy, description && descriptionId].filter(Boolean).join(" ");
    const type = multiple ? "checkbox" : "radio";
    const isInsideGroup = useContext(SelectorGroupContext);
    if (process.env.NODE_ENV !== "production") {
      if (!isInsideGroup) {
        deprecate(
          "Selector",
          "The Selector component has been deprecated. Use the SelectorGroup component instead."
        );
      }
      if (legacySizeMap[legacySize]) {
        deprecate(
          "Selector",
          `The \`${legacySize}\` size has been deprecated. Use the \`${legacySizeMap[legacySize]}\` size instead.`
        );
      }
    }
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !isSufficientlyLabelled(label)) {
      throw new AccessibilityError(
        "Selector",
        "The `label` prop is missing or invalid."
      );
    }
    const size = legacySizeMap[legacySize] || legacySize;
    const hasDescription = Boolean(description);
    return /* @__PURE__ */ jsxs(FieldWrapper, { className, style, disabled, children: [
      /* @__PURE__ */ jsx(
        "input",
        {
          type,
          id: inputId,
          "aria-describedby": descriptionIds,
          name,
          value,
          disabled,
          onClick: onChange,
          onChange: () => {
          },
          className: clsx(
            classes.base,
            invalid && classes.invalid,
            utilClasses.hideVisually
          ),
          ref,
          ...props
        }
      ),
      /* @__PURE__ */ jsxs(
        "label",
        {
          htmlFor: inputId,
          className: clsx(
            classes.label,
            classes[size],
            hasDescription && classes["has-description"]
          ),
          children: [
            Icon && /* @__PURE__ */ jsx(Icon, { className: classes.icon, "aria-hidden": "true" }),
            hasDescription ? /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx("span", { className: classes.title, children: label || children }),
              /* @__PURE__ */ jsx("span", { className: classes.description, "aria-hidden": "true", children: description })
            ] }) : label || children
          ]
        }
      ),
      hasDescription && /* @__PURE__ */ jsx("p", { id: descriptionId, className: utilClasses.hideVisually, children: description })
    ] });
  }
);
Selector.displayName = "Selector";
export {
  Selector,
  SelectorGroupContext
};
