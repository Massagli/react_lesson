"use strict";
"use client";
import { jsxs, jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { ChevronRight } from "@sumup-oss/icons";
import { isFunction, isString } from "../../util/type-check.js";
import { CircuitError } from "../../util/errors.js";
import { clsx } from "../../styles/clsx.js";
import classes from "./ListItem.module.css.js";
import { useComponents } from "../ComponentsContext/useComponents.js";
import { Body } from "../Body/Body.js";
const ListItem = forwardRef(
  ({
    variant = "action",
    leadingComponent: LeadingComponent,
    label,
    details,
    trailingLabel,
    trailingDetails,
    trailingComponent,
    className,
    selected,
    ...props
  }, ref) => {
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
      if (trailingDetails && !trailingLabel) {
        throw new CircuitError(
          "ListItem",
          "Using `trailingDetails` without `trailingLabel` is not supported. Use a custom `trailingComponent` if necessary."
        );
      }
      if (trailingComponent && trailingLabel) {
        throw new CircuitError(
          "ListItem",
          "Using `trailingLabel` and `trailingComponent` at the same time is not supported. Add a label to the custom `trailingComponent` if necessary."
        );
      }
    }
    const { Link } = useComponents();
    let Element = "div";
    if (props.href) {
      Element = Link;
    } else if (props.onClick) {
      Element = "button";
    }
    const isNavigation = variant === "navigation";
    const hasTrailing = !!trailingLabel || !!trailingComponent;
    const shouldRenderTrailingContainer = hasTrailing || isNavigation;
    return /* @__PURE__ */ jsxs(
      Element,
      {
        ...props,
        "aria-current": props.onClick || props.href ? selected : void 0,
        className: clsx(
          classes.base,
          isNavigation && classes.navigation,
          className
        ),
        ref,
        children: [
          LeadingComponent && /* @__PURE__ */ jsx("div", { className: classes.leading, children: isFunction(LeadingComponent) ? /* @__PURE__ */ jsx(LeadingComponent, { size: "24", "aria-hidden": "true" }) : LeadingComponent }),
          /* @__PURE__ */ jsxs("div", { className: classes.content, children: [
            /* @__PURE__ */ jsxs("div", { className: classes.main, children: [
              isString(label) ? /* @__PURE__ */ jsx(Body, { size: "m", className: classes.label, children: label }) : label,
              details && /* @__PURE__ */ jsx("div", { className: classes.details, children: isString(details) ? /* @__PURE__ */ jsx(Body, { size: "s", color: "subtle", children: details }) : details })
            ] }),
            shouldRenderTrailingContainer && /* @__PURE__ */ jsxs(
              "div",
              {
                className: clsx(
                  classes.trailing,
                  Boolean(trailingLabel) && classes["has-label"]
                ),
                children: [
                  /* @__PURE__ */ jsxs("div", { className: classes.chevron, children: [
                    isString(trailingLabel) ? /* @__PURE__ */ jsx(Body, { size: "m", weight: "semibold", children: trailingLabel }) : trailingLabel,
                    trailingComponent,
                    isNavigation && /* @__PURE__ */ jsx(ChevronRight, { size: "16", "aria-hidden": "true" })
                  ] }),
                  trailingDetails && /* @__PURE__ */ jsx("div", { className: classes.details, children: isString(trailingDetails) ? /* @__PURE__ */ jsx(Body, { size: "s", color: "subtle", children: trailingDetails }) : trailingDetails })
                ]
              }
            )
          ] })
        ]
      }
    );
  }
);
ListItem.displayName = "ListItem";
export {
  ListItem
};
