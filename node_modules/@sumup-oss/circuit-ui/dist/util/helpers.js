"use strict";
import { isString, isArray, isObject, isFunction } from "./type-check.js";
function eachFn(fns) {
  return (...args) => fns.forEach((fn) => isFunction(fn) && fn(...args));
}
function isEmpty(value) {
  if (!value) {
    return true;
  }
  if (isString(value) || isArray(value)) {
    return !value.length;
  }
  if (isObject(value)) {
    return !Object.keys(value).length;
  }
  return false;
}
function clamp(value, min, max) {
  if (process.env.NODE_ENV !== "production" && min >= max) {
    throw new RangeError(
      `The minimum value (${min}) must be less than the maximum value (${max}).`
    );
  }
  return Math.max(min, Math.min(value, max));
}
function throttle(fn, timeout) {
  let ready = true;
  return (...args) => {
    if (!ready) {
      return;
    }
    ready = false;
    fn(...args);
    setTimeout(() => {
      ready = true;
    }, timeout);
  };
}
function chunk(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function last(array) {
  return isArray(array) ? array[array.length - 1] : void 0;
}
function shiftInRange(value, offset, min, max) {
  if (process.env.NODE_ENV !== "production") {
    if (min >= max) {
      throw new RangeError(
        `The minimum value (${min}) must be less than the maximum value (${max}).`
      );
    }
    if (value < min || value > max) {
      throw new TypeError(
        `The value (${value}) must be inside the provided range (${min}'-'${max})`
      );
    }
  }
  const modulus = max - min + 1;
  return (value - min + offset % modulus + modulus) % modulus + min;
}
export {
  chunk,
  clamp,
  eachFn,
  isEmpty,
  last,
  shiftInRange,
  throttle
};
