"use strict";
import { isString } from "./type-check.js";
const FALLBACK_LOCALE = "en-US";
const SUPPORTED_LOCALES = [
  "bg-BG",
  "cs-CZ",
  "da-DK",
  "de-AT",
  "de-CH",
  "de-DE",
  "de-LU",
  "el-CY",
  "el-GR",
  "en-AU",
  "en-GB",
  "en-IE",
  "en-MT",
  "en-US",
  "es-CL",
  "es-CO",
  "es-ES",
  "es-MX",
  "es-PE",
  "es-US",
  "et-EE",
  "fi-FI",
  "fr-BE",
  "fr-CH",
  "fr-FR",
  "fr-LU",
  "hr-HR",
  "hu-HU",
  "it-CH",
  "it-IT",
  "lt-LT",
  "lv-LV",
  "nb-NO",
  "nl-BE",
  "nl-NL",
  "pl-PL",
  "pt-BR",
  "pt-PT",
  "ro-RO",
  "sk-SK",
  "sl-SI",
  "sv-SE"
];
function getDefaultLocale() {
  if (typeof window === "undefined") {
    return FALLBACK_LOCALE;
  }
  return navigator.languages || navigator.language || FALLBACK_LOCALE;
}
function findSupportedLocale(locale) {
  const locales = isString(locale) ? [locale] : locale;
  for (const l of locales) {
    const matcher = locale.length === 5 ? (value) => value === l : (value) => value.startsWith(l);
    const match = SUPPORTED_LOCALES.find(matcher);
    if (match) {
      return match;
    }
  }
  return FALLBACK_LOCALE;
}
function transformModulesToTranslations(modules) {
  const translations = Object.entries(modules).reduce(
    (acc, [importPath, exports]) => {
      const { default: unused, ...strings } = exports;
      const matches = importPath.match(/[a-z]{2}-[A-Z]{2}/);
      const locale = matches[0];
      acc[locale] = strings;
      return acc;
    },
    {}
  );
  return translations;
}
export {
  FALLBACK_LOCALE,
  SUPPORTED_LOCALES,
  findSupportedLocale,
  getDefaultLocale,
  transformModulesToTranslations
};
