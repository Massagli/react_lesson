"use strict";
import React from "react";
import { isString } from "./type-check.js";
class CircuitError extends Error {
  constructor(componentName, message) {
    var _a, _b, _c;
    super(`[${componentName}] ${message}`);
    this.name = "CircuitError";
    if (
      // @ts-expect-error Since this code only runs in development, it's fine to use this internal React API.
      (_b = (_a = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) == null ? void 0 : _a.return) == null ? void 0 : _b.type
    ) {
      this.stack = // @ts-expect-error This is fine.
      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.return.type;
    }
    if (
      // @ts-expect-error Since this code only runs in development, it's fine to use this internal React API.
      (_c = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugCurrentFrame) == null ? void 0 : _c.getCurrentStack
    ) {
      this.stack = // @ts-expect-error This is fine.
      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactDebugCurrentFrame.getCurrentStack();
    }
  }
}
class DeprecationError extends CircuitError {
  constructor(componentName, message) {
    super(componentName, message);
    this.name = "DeprecationError";
  }
}
class AccessibilityError extends CircuitError {
  constructor(componentName, message) {
    super(componentName, message);
    this.name = "AccessibilityError";
  }
}
function isSufficientlyLabelled(label, attributes) {
  if ((attributes == null ? void 0 : attributes["aria-hidden"]) === true || (attributes == null ? void 0 : attributes["aria-hidden"]) === "true") {
    return true;
  }
  if (label) {
    return isString(label) ? Boolean(label.trim()) : true;
  }
  const attribute = (attributes == null ? void 0 : attributes["aria-label"]) || (attributes == null ? void 0 : attributes["aria-labelledby"]);
  return isString(attribute) ? Boolean(attribute.trim()) : false;
}
export {
  AccessibilityError,
  CircuitError,
  DeprecationError,
  isSufficientlyLabelled
};
