"use strict";
import { useState, useCallback, useEffect } from "react";
import { throttle } from "../../util/helpers.js";
function getSize(element) {
  if (!element) {
    return {
      width: 0,
      height: 0
    };
  }
  return {
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}
function useComponentSize(ref, initialSize = { width: 0, height: 0 }) {
  const [componentSize, setComponentSize] = useState(initialSize);
  const handleResize = useCallback(() => {
    throttle(() => {
      setComponentSize(getSize(ref.current));
    }, 500)();
  }, [ref]);
  useEffect(() => {
    const node = ref.current;
    if (!node) {
      return void 0;
    }
    handleResize();
    if (typeof ResizeObserver === "function") {
      const resizeObserver = new ResizeObserver(handleResize);
      resizeObserver.observe(node);
      return () => {
        resizeObserver.disconnect();
      };
    }
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [handleResize, ref]);
  return componentSize;
}
export {
  useComponentSize
};
