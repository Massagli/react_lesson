"use strict";
import { useId, useRef, useState, useCallback } from "react";
import { useAnimation } from "../useAnimation/useAnimation.js";
const DEFAULT_HEIGHT = "auto";
function useCollapsible({
  initialOpen = false,
  duration = 200,
  id: customId
} = {}) {
  const id = useId();
  const contentId = customId || id;
  const contentElement = useRef(null);
  const [isOpen, setOpen] = useState(initialOpen);
  const [height, setHeight] = useState(getHeight(contentElement));
  const [overflow, setOverflow] = useState(
    initialOpen ? "visible" : "hidden"
  );
  const [isAnimating, setAnimating] = useAnimation();
  const toggleOpen = useCallback(() => {
    setAnimating({
      duration,
      onStart: () => {
        setHeight(getHeight(contentElement));
        setOverflow("hidden");
        window.requestAnimationFrame(() => {
          setOpen((prev) => !prev);
        });
      },
      onEnd: () => {
        setHeight(DEFAULT_HEIGHT);
        setOverflow("visible");
      }
    });
  }, [setAnimating, duration]);
  return {
    isOpen,
    toggleOpen,
    isAnimating,
    getButtonProps: (props = {}) => ({
      "onClick": (event) => {
        if (props.onClick) {
          props.onClick(event);
        }
        toggleOpen();
      },
      "aria-controls": contentId,
      "aria-expanded": isOpen ? "true" : "false"
    }),
    getContentProps: (props = {}) => ({
      "ref": contentElement,
      "id": contentId,
      "style": {
        overflowY: overflow,
        willChange: "height",
        opacity: isOpen ? 1 : 0,
        height: isOpen ? height : 0,
        visibility: isOpen ? "visible" : "hidden",
        transition: `all ${duration}ms ease-in-out`,
        ...props.style
      },
      "aria-hidden": isOpen ? void 0 : "true"
    })
  };
}
function getHeight(element) {
  if (!element || !element.current) {
    return DEFAULT_HEIGHT;
  }
  return `${element.current.scrollHeight}px`;
}
export {
  getHeight,
  useCollapsible
};
