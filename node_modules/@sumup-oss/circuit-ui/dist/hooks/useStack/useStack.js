"use strict";
import { useReducer, useEffect } from "react";
import { last } from "../../util/helpers.js";
function createReducer() {
  return (state, action) => {
    switch (action.type) {
      case "push": {
        return [...state, action.item];
      }
      case "pop": {
        const firstItems = state.slice(0, -1);
        if (action.transition) {
          const lastItem = {
            ...last(state),
            transition: action.transition
          };
          return [...firstItems, lastItem];
        }
        return firstItems;
      }
      case "remove": {
        if (action.transition) {
          return state.map(
            (s) => s.id !== action.id ? s : { ...s, transition: action.transition }
          );
        }
        return state.filter((s) => s.id !== action.id);
      }
      case "update": {
        return state.map(
          (s) => s.id !== action.item.id ? s : { ...s, ...action.item }
        );
      }
      default: {
        return state;
      }
    }
  };
}
function useStack(initialStack = []) {
  const reducer = createReducer();
  const [state, dispatch] = useReducer(reducer, initialStack);
  useEffect(() => {
    const itemsToRemove = state.filter((item) => item.transition);
    if (itemsToRemove.length === 0) {
      return;
    }
    itemsToRemove.reverse().forEach((itemToRemove) => {
      setTimeout(
        () => {
          dispatch({ type: "remove", id: itemToRemove.id });
        },
        // We found the item by the `transition` property, so we can be sure it exists.
        itemToRemove.transition.duration
      );
    });
  }, [state]);
  return [state, dispatch];
}
export {
  useStack
};
