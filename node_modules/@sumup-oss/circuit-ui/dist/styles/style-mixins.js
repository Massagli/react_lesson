"use strict";
import { css } from "@emotion/react";
import { warn } from "../util/logger.js";
import { isFunction } from "../util/type-check.js";
function isTheme(args) {
  return args.theme === void 0;
}
const getTheme = (args) => isTheme(args) ? args : args.theme;
const cx = (...styleFns) => (theme) => styleFns.map((styleFn) => isFunction(styleFn) ? styleFn(theme) : styleFn);
const mapSpacingValue = (theme, value) => {
  if (process.env.NODE_ENV !== "production") {
    if (typeof value === "number" && value !== 0) {
      warn(
        "spacing",
        `The number "${value}" was passed to the spacing mixin.`,
        "This is not supported. Pass a spacing constant, 'auto', or 0 instead."
      );
    }
  }
  if (value === 0 || value === "auto") {
    return String(value);
  }
  return theme.spacings[value];
};
const spacing = (size) => {
  if (typeof size === "string" || typeof size === "number") {
    return (args) => {
      const theme = getTheme(args);
      return css({ margin: mapSpacingValue(theme, size) });
    };
  }
  const margins = {};
  return (args) => {
    const theme = getTheme(args);
    if (typeof size.top !== "undefined") {
      margins.marginTop = mapSpacingValue(theme, size.top);
    }
    if (typeof size.right !== "undefined") {
      margins.marginRight = mapSpacingValue(theme, size.right);
    }
    if (typeof size.bottom !== "undefined") {
      margins.marginBottom = mapSpacingValue(theme, size.bottom);
    }
    if (typeof size.left !== "undefined") {
      margins.marginLeft = mapSpacingValue(theme, size.left);
    }
    return css(margins);
  };
};
function shadow() {
  return css`
    box-shadow: 0 3px 8px 0 rgba(0, 0, 0, 0.2);
  `;
}
function typography(size) {
  return (args) => {
    const theme = getTheme(args);
    return css(theme.typography.body[size]);
  };
}
const disableVisually = () => css`
  opacity: 0.5;
  pointer-events: none;
  box-shadow: none;
`;
const hideVisually = () => css`
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
`;
const center = () => css`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
`;
function focusOutline(options) {
  if (options === "inset") {
    return css`
      outline: 0;
      box-shadow: inset 0 0 0 2px var(--cui-border-focus);

      &::-moz-focus-inner {
        border: 0;
      }
    `;
  }
  return css`
    outline: 0;
    box-shadow:
      0 0 0 2px var(--cui-bg-normal),
      0 0 0 4px var(--cui-border-focus);

    &::-moz-focus-inner {
      border: 0;
    }
  `;
}
function focusVisible(options) {
  if (options === "inset") {
    return css`
      &:focus {
        outline: 0;
        box-shadow: inset 0 0 0 2px var(--cui-border-focus);

        &::-moz-focus-inner {
          border: 0;
        }
      }

      &:focus:not(:focus-visible) {
        box-shadow: none;
      }
    `;
  }
  return css`
    &:focus {
      outline: 0;
      box-shadow:
        0 0 0 2px var(--cui-bg-normal),
        0 0 0 4px var(--cui-border-focus);

      &::-moz-focus-inner {
        border: 0;
      }
    }

    &:focus:not(:focus-visible) {
      box-shadow: none;
    }
  `;
}
const clearfix = () => css`
  &::before,
  &::after {
    content: ' ';
    display: table;
  }
  &::after {
    clear: both;
  }
`;
const hideScrollbar = () => css`
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
`;
const inputOutline = (options) => {
  switch (true) {
    case options.disabled: {
      return css`
        box-shadow: 0 0 0 1px var(--cui-border-normal-disabled);
      `;
    }
    case options.invalid: {
      return css`
        box-shadow: 0 0 0 1px var(--cui-border-danger);

        &:hover {
          box-shadow: 0 0 0 1px var(--cui-border-danger-hovered);
        }

        &:focus {
          box-shadow: 0 0 0 2px var(--cui-border-danger);
        }

        &:active {
          box-shadow: 0 0 0 1px var(--cui-border-danger-pressed);
        }
      `;
    }
    case options.hasWarning: {
      return css`
        box-shadow: 0 0 0 1px var(--cui-border-warning);

        &:hover {
          box-shadow: 0 0 0 1px var(--cui-border-warning-hovered);
        }

        &:focus {
          box-shadow: 0 0 0 2px var(--cui-border-warning);
        }

        &:active {
          box-shadow: 0 0 0 1px var(--cui-border-warning-pressed);
        }
      `;
    }
    default: {
      return css`
        box-shadow: 0 0 0 1px var(--cui-border-normal);

        &:hover {
          box-shadow: 0 0 0 1px var(--cui-border-normal-hovered);
        }

        &:focus {
          box-shadow: 0 0 0 2px var(--cui-border-accent);
        }

        &:active {
          box-shadow: 0 0 0 1px var(--cui-border-accent);
        }
      `;
    }
  }
};
export {
  center,
  clearfix,
  cx,
  disableVisually,
  focusOutline,
  focusVisible,
  hideScrollbar,
  hideVisually,
  inputOutline,
  shadow,
  spacing,
  typography
};
