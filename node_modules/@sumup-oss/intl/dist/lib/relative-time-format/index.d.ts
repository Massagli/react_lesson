/**
 * Copyright 2024, SumUp Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { Locale } from '../../types/index.js';
import { isRelativeTimeFormatSupported } from './intl.js';
export { isRelativeTimeFormatSupported };
/**
 * Formats a relative time with support for various [styles](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#style).
 *
 * @example
 * import { formatRelativeTime } from '@sumup-oss/intl';
 *
 * formatRelativeTime(1, 'day', 'de-DE'); // 'in 1 Tag'
 * formatRelativeTime(7, 'years', ['pt-BR', 'pt']); // 'em 7 anos'
 * formatRelativeTime(-5, 'months', 'en-GB', {
 *   style: 'narrow',
 * }); // '5 mo ago'
 *
 * @remarks
 * In runtimes that don't support the `Intl.RelativeTimeFormat` API,
 * the relative time is formatted using the `Intl.NumberFormat` API instead.
 *
 * @category Date & Time
 */
export declare const formatRelativeTime: (value: number, unit: Intl.RelativeTimeFormatUnit, locales?: Locale | Locale[], options?: Intl.RelativeTimeFormatOptions) => string;
/**
 * Formats a relative time to parts with support for various [styles](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#style).
 *
 * @example
 * import { formatRelativeTimeToParts } from '@sumup-oss/intl';
 *
 * formatRelativeTimeToParts(1, 'day', 'de-DE');
 * // [
 * //  { "type": "literal", "value": "in " },
 * //  { "type": "integer", "unit": "day", "value": "1" },
 * //  { "type": "literal", "value": " Tag" }
 * // ]
 * formatRelativeTimeToParts(7, 'years', ['pt-BR', 'pt']);
 * // [
 * //   { "type": "literal", "value": "em " },
 * //   { "type": "integer", "unit": "year", "value": "7" },
 * //   { "type": "literal", "value": " anos" }
 * // ]
 * formatRelativeTimeToParts(-5, 'months', 'en-GB', {
 *   style: 'narrow',
 * });
 * // [
 * //   { "type": "integer", "unit": "month", "value": "5" },
 * //   { "type": "literal", "value": " mo ago" }
 * // ]
 *
 * @remarks
 * In runtimes that don't support the `Intl.RelativeTimeFormat` API,
 * the relative time is formatted using the `Intl.NumberFormat` API instead.
 *
 * @category Date & Time
 */
export declare const formatRelativeTimeToParts: (value: number, unit: Intl.RelativeTimeFormatUnit, locales?: Locale | Locale[], options?: Intl.RelativeTimeFormatOptions) => Intl.RelativeTimeFormatPart[];
/**
 * Resolves the locale and collation options that are used to format a relative time.
 *
 * @example
 * import { resolveRelativeTimeFormat } from '@sumup-oss/intl';
 *
 * resolveRelativeTimeFormat('de-DE');
 * // {
 * //   "locale": "de-DE",
 * //   "numberingSystem": "latn",
 * //   "numeric": "always",
 * //   "style": "long",
 * // }
 * resolveRelativeTimeFormat(['pt-BR', 'pt']);
 * // {
 * //   "locale": "pt-BR",
 * //   "numberingSystem": "latn",
 * //   "numeric": "always",
 * //   "style": "long",
 * // }
 * resolveRelativeTimeFormat('en-GB', {
 *   style: 'narrow',
 * });
 * // {
 * //   "locale": "en-GB",
 * //   "numberingSystem": "latn",
 * //   "numeric": "always",
 * //   "style": "narrow",
 * // }
 *
 * @remarks
 * In runtimes that don't support the `Intl.RelativeTimeFormat.resolvedOptions` API,
 * `null` is returned.
 *
 * @category Date & Time
 */
export declare const resolveRelativeTimeFormat: (locales?: Locale | Locale[], options?: Intl.RelativeTimeFormatOptions) => null | Intl.ResolvedRelativeTimeFormatOptions;
